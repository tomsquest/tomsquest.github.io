<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Thomas Queste&#39;s blog</title>
    <id>http://www.tomsquest.com/blog/</id>
    <updated>2019-06-21T16:12:20+02:00</updated>
    <link href="http://www.tomsquest.com/blog/"/>
    <link href="http://www.tomsquest.com/blog/"/><link href="http://www.tomsquest.com/blog//atom.xml" rel="self" type="application/atom.xml" />
    <author>
        <name>Thomas Queste</name>
    </author>

    
        <entry>
            <title type="html"><![CDATA[Better NPM'ing, Tips and Tricks using NPM]]></title>
            <link href="http://www.tomsquest.com/blog/2018/10/better-npm-ing/"/>
            <id>http://www.tomsquest.com/blog/2018/10/better-npm-ing/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2018-10-02T00:00:00+00:00</published>
            <updated>2018-10-02T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/2018-10-02-better-npm-ing/npm_logo.png" alt="npm logo" /></p>

<p>I discovered several tips working with NPM on a daily basis. Here are the top ones.</p>

<p><strong>TL;DR</strong>: save-exact, npm ci, npm audit fix, npx, updtr, <code>NVM_SYMLINK_CURRENT</code></p>

<p>I presented those tips to my coworkers, <a href="https://tomsquest.github.io/presentation-better-npm-ing/">the slides are available online</a>.</p>

<h2 id="reproducible-builds">Reproducible builds</h2>

<p><strong>Problem</strong>: your local install can/will differ from another coworkers, even on the CI server!</p>

<p><strong>Cause</strong>: Version range are problematic: <code>&quot;rxjs&quot;: &quot;^6.2.2&quot;</code></p>

<p><a href="https://greenkeeper.io">Greenkeeper.io</a> tells us that 15% of packages break the <em>minor</em> or <em>patch</em> updates:</p>

<p><img src="/img/posts/2018-10-02-better-npm-ing/greenkeeper.png" alt="Greekeeper" /></p>

<p><strong>Solution</strong>: Use <code>--save-exact</code> when installing a dependency</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm install --save-exact aDependency
<span style="color:#75715e"># Shorter:</span>
$ npm i -E aDependency</code></pre></div>
<p><strong>Better solution</strong>: Always exact, never use a range: <code>npm config set save-exact true</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm config set save-exact true</code></pre></div>
<h2 id="installing-package">Installing package</h2>

<p><strong>Problem</strong>: Using <code>npm install</code> will tries to resolves the dependency graph, possibly installing different versions (because of ranges declared in dependencies, not yours even if you used <code>--save-exact</code>) and then updating the <code>package-lock.json</code> even if you did not want to.</p>

<p><strong>Solution</strong>: Use <code>npm ci</code> which only read the <code>package-lock.json</code></p>

<p>↗ Speed (on CI and locally)</p>

<p>➕ Avoid dirty-ing the <code>package-lock.json</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm ci</code></pre></div>
<h2 id="global-package">Global package</h2>

<p><strong>Problem</strong>: Polluting the global <code>node_modules</code> with global packages: nest-cli, create-react-apps (= hundreds of packages)</p>

<p><strong>Solution</strong>: <code>npx</code> runs a package without installing it (but first, tries to find it locally in <code>node_modules</code>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Example with params given to cleaver</span>
$ npx cleaver watch index.md</code></pre></div>
<h2 id="security">Security</h2>

<p><strong>Problem</strong>: Finding packages with security flaws</p>

<p><strong>Solution</strong>: Use the builtin <code>npm audit</code> and <code>npm audit fix</code></p>

<p>➕ Fails the build given integrated it in CI</p>

<p>Another solution is to use the builtin services of Github and Gitlab.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npm audit fix</code></pre></div>
<h2 id="updating-packages">Updating packages</h2>

<p><strong>Problem</strong>: Updating dependency and finding the one that breaks the code is tedious.</p>

<p><strong>Solution 1 (best)</strong>: <a href="https://www.npmjs.com/package/updtr">updtr</a> update one dependency, then run the tests, then repeat</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npx updtr</code></pre></div>
<p><strong>Solution 2</strong>: <a href="https://www.npmjs.com/package/npm-check">npm-check</a> show a pretty menu of all updates</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ npx npm-check -u</code></pre></div>
<p><img src="/img/posts/2018-10-02-better-npm-ing/npm-check-u.png" alt="npx npm-check -u" /></p>

<h2 id="current-node-version-in-tools">Current Node version in Tools</h2>

<p><strong>Problem</strong>: When configuring Node/Typescript, the node <strong>path</strong> is version-dependent</p>

<p><img src="/img/posts/2018-10-02-better-npm-ing/nvm_symlink_current.png" alt="List of node version from Intellij" /></p>

<p><strong>Solution</strong>: if you use NVM for managing installation of Node.js, NVM can automatically manage a symlink to the current version of node. NVM will link <code>~/.nvm/current</code> to, for example, <code>~/.nvm/versions/node/v11.0.0</code> and recreate the link when changing of node version (automatically if you use <a href="https://github.com/tomsquest/nvm-auto-use.zsh">NVM auto-use ZSH plugin</a>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Put this in your .bashrc/.zshrc</span>
$ export NVM_SYMLINK_CURRENT<span style="color:#f92672">=</span>true</code></pre></div>
<h2 id="bonus-follow-github-releases">(Bonus) Follow Github Releases</h2>

<p><strong>Problem</strong>: Be notified of releases</p>

<p><strong>Solution 1</strong>: (<em>Updated: 2018.12.02</em>) Github now support watching releases of a repository: <a href="https://help.github.com/articles/watching-and-unwatching-releases-for-a-repository/">Documentation</a>.</p>

<p><strong>Solution 2</strong>: <a href="https://gitpunch.com">Gitpunch.com</a> seems to solve the problem. It can follow all your Github stars and specific projects.</p>

<p><a href="https://gitpunch.com"><img src="/img/posts/2018-10-02-better-npm-ing/gitpunch.com.png" alt="Git Punch" /></a></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Intellij Championship]]></title>
            <link href="http://www.tomsquest.com/blog/2017/07/intellij-master-presentation/"/>
            <id>http://www.tomsquest.com/blog/2017/07/intellij-master-presentation/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2017-07-21T00:00:00+00:00</published>
            <updated>2017-07-21T00:00:00+00:00</updated>
            <content type="html"><![CDATA[<p><img src="/img/posts/intellij.png" alt="intellij logo" /></p>

<p>Last week I ran an <strong>&ldquo;Intellij Master Championship&rdquo;</strong> class/presentation. There were prizes to win, like Jetbrains Yoyos, Intellij Stickers.</p>

<p>We had a great time sharing tips and counting points to nominate the &ldquo;best-intellij-touch-typist-2k17&rdquo;.</p>

<p>The rules were one point by valid answer and each player answers secretly then the answer is given before I show it on screen and discuss it.</p>

<p>If you would like to run the presentation, the html is here: <a href="https://tomsquest.github.io/intellij-master-presentation/">https://tomsquest.github.io/intellij-master-presentation/</a></p>

<p>The PDF of the shortcuts is at: <a href="https://github.com/tomsquest/intellij-master-presentation/blob/master/SHORTCUTS.pdf">https://github.com/tomsquest/intellij-master-presentation/blob/master/SHORTCUTS.pdf</a></p>

<p>And the whole source is on <a href="https://github.com/tomsquest/intellij-master-presentation">github</a>.</p>

<p><img src="/img/posts/intellij-master-swag.png" alt="intellij logo" /></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Global Day Of Coderetreat 2016]]></title>
            <link href="http://www.tomsquest.com/blog/2016/10/coderetreat-2016/"/>
            <id>http://www.tomsquest.com/blog/2016/10/coderetreat-2016/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2016-10-23T00:00:00+00:00</published>
            <updated>2016-10-23T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/coderetreat.png" alt="Global Day of Coderetreat" /></p>

<p>Saturday was the <a href="http://globalday.coderetreat.org/">Global day of Coderetreat</a>, an event occurring every year and which brings people, on their free time, to pair-program with <em>complete</em> strangers.
The website tells about 115 participating cities and many many developers worldwide.</p>

<p>I was one of them, and Wow, it was really enjoyable!</p>

<h2 id="what-we-did">What we did</h2>

<p>Six rounds of 45 minutes, with another developer, starting fresh each time (the code is thrown every time, that robot voice shouting &ldquo;DELETE THE CODE&hellip;NOW!&rdquo;).<br />
Each time with different constraints. I should say with different <strong>game</strong> rules.</p>

<p>For example, we did:</p>

<ul>
<li>a TDD approach, classical</li>
<li>a <strong>Fast</strong> TDD loop, aka Ping-pong: one writes the test, the other the code, the first refactors, then we start over</li>
<li>an <strong>Extreme</strong> TDD loop: <code>git reset --hard</code> if something is not working in <strong>2 minutes</strong></li>
<li>Silent pair-programming: no talking at all, no message, communicate just by coding</li>
<li>Develop with one or many constraints: only keyboard (no mouse/touchpad), no primitives&hellip;</li>
</ul>

<h2 id="what-i-learnt">What I learnt</h2>

<p>I learnt many things, and the first one is that I can write code (share the keyboard) with complete strangers and enjoy it a lot, in a saturday!</p>

<p>Two things I will try:</p>

<p>First, I will experiment with a Commit-per-Pomodoro approach. I sometimes commit more often than 25 minutes, and some times I do not commit for ours. Aiming for an task/subtask every 25 minutes can be a good thing to try.</p>

<p>Second, when pair-programming for too much time, I will propose to renew how we do it. Let&rsquo;s add a new rule, like not using the mouse. This should be lightweight and fun. The purpose is to get a little boost of motivation when tired and when we &ldquo;can&rsquo;t&rdquo; stop pair-programming.</p>

<h2 id="next">Next</h2>

<p>The global day was really fun. A log of good vibes, and interesting discussions at lunch.</p>

<p>Next year, I will be there!</p>

<h2 id="thanks">Thanks</h2>

<p>Thanks to <a href="https://twitter.com/jak78">Julien Jakubowski</a>, <a href="https://twitter.com/antoineblancke">Antoine Blancke</a>, <a href="https://twitter.com/FabienGoguillon">Fabien GOGUILLON</a> and <a href="https://twitter.com/xavierballoy">Xavier Balloy</a> for animating.<br />
Thanks to <a href="https://www.axawebcenter.fr/">Axa Web Center</a> for hosting the event.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[My attempt at building a production grade docker image]]></title>
            <link href="http://www.tomsquest.com/blog/2016/10/production-docker-image/"/>
            <id>http://www.tomsquest.com/blog/2016/10/production-docker-image/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2016-10-17T00:00:00+00:00</published>
            <updated>2016-10-17T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/docker.png" alt="Book cover" /></p>

<p>As I am self-hosting a couple of services, mainly for keeping my data for myself (Sorry Google, Facebook), I tried to build a &ldquo;production-grade docker image&rdquo;. Here&rsquo;s my attempt and what I learnt along the way.</p>

<h2 id="radicale">Radicale</h2>

<p>The first service I dockerized is <a href="http://radicale.org/">Radicale</a>, a calendar/contact server (CalDav/CardDav).</p>

<p>Radicale is a good choice for a start due to its simplicity:</p>

<ul>
<li>written in python</li>
<li>filesystem database</li>
<li>single config file</li>
<li>runnable directly with <code>radicale</code></li>
<li>available in PyPI (<code>pip install radicale</code>)</li>
</ul>

<p>If we wanted to stop here, this Dockerfile is sufficient:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> debian:jessie</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span><span style="color:#e6db74"> DEBIAN_FRONTEND noninteractive</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> apt-get install -y python2.7 python-pip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    <span style="color:#f92672">&amp;&amp;</span> rm -rf /var/lib/apt/lists/*<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install radicale<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span><span style="color:#e6db74"> [&#34;radicale&#34;]</span></code></pre></div>
<h2 id="easy-use-a-smaller-base-image">Easy: Use a smaller base image</h2>

<p>I started with a Debian base image, then switch to an Alpine image, then found there are even alpine+python images.</p>

<p>The official Python images have an Alpine version: <a href="https://hub.docker.com/_/python/">https://hub.docker.com/_/python/</a></p>

<p>I did not set a specific image version (eg. <code>python:3.5.2-alpine</code>) in the hope that it could ease upgrades and
that a rebuild could be automatically fired by Docker hub using a configured dependency. Forget repeatable builds !</p>

<p>Let&rsquo;s go for <code>python:3-alpine</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:3-alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install radicale<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span><span style="color:#e6db74"> [&#34;radicale&#34;]</span></code></pre></div>
<h2 id="easy-process-management">Easy: Process management</h2>

<p>It seems a good practice to use a process manager to handle PID 1 and reaping subprocesses.
As I don&rsquo;t know if Radicale handles signals properly, nor if it would create new subprocesses and handle them well,
let&rsquo;s use a process manager (this is more cargo-cult than scientific evidence).</p>

<p>I started with <a href="https://github.com/Yelp/dumb-init">Yelp&rsquo;s Dumb Init</a> but:</p>

<ul>
<li>I got strange messages when stopping the container</li>
<li>Dumb Init is in <code>PyPI</code> but requires a C compiler installed, which needs to be added to the Alpine image</li>
</ul>

<p>Alternative: use <a href="https://github.com/krallin/tini">Tini</a>, a <code>tiny but valid 'init' for containers</code>.
Tini has the advantages of <em>just</em> working and installable in Alpine with <code>apk add --update tini</code>.</p>

<p>Here is our image with Tini:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:3-alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install radicale<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span><span style="color:#e6db74"> [&#34;/tini&#34;, &#34;--&#34;]</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span><span style="color:#e6db74"> [&#34;radicale&#34;]</span></code></pre></div>
<h2 id="hard-volumes-and-permission">Hard: Volumes and permission</h2>

<p>Next best practices: Never Run As <strong>Root</strong>.
We don&rsquo;t do that for hosted services since decades, so don&rsquo;t do that inside containers,
especially publicly opened containers. The Docker Security team does not recommend it either
(<a href="https://www.youtube.com/watch?v=LmUw2H6JgJo">https://www.youtube.com/watch?v=LmUw2H6JgJo</a>).</p>

<p>That means: use the <code>USER</code> instruction or switch user when the container is run.
Combined with a volume, that&rsquo;s were I started having <strong>permission problems</strong>.</p>

<p>What seems to occur is that mounting a host volume (eg. <code>docker run ... -v /path:/data/radicale</code>)
overwrites the permission <strong>in</strong> the container. What was owned by <code>radicale:radicale</code> became owned by <code>root:root</code> in the container.</p>

<p>The reason is that the Docker daemon runs as <code>root</code>, so the mounted volume became root (UID=0) <strong>in</strong> the container, in which, UID=0 is also root. Note that, when the <code>radicale</code> user in the container has the UID 1000, which is my user on the host. Complete detail here: <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">https://denibertovic.com/posts/handling-permissions-with-docker-volumes/</a></p>

<p>I first found a solution from <a href="https://stackoverflow.com/questions/23544282/what-is-the-best-way-to-manage-permissions-for-docker-shared-volumes">Stack Overflow</a> and
in the book <a href="http://shop.oreilly.com/product/0636920035671.do">Using Docker</a> by Adrian Mouat (excellent book btw).</p>

<p>The <a href="https://hub.docker.com/_/redis/">Redis docker image</a> handles the permission problem this way:</p>

<ul>
<li>First, use a custom entrypoint:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile">COPY docker-entrypoint.sh /usr/local/bin/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span><span style="color:#e6db74"> [&#34;/usr/local/bin/docker-entrypoint.sh&#34;]</span></code></pre></div>
<ul>
<li>Then, <code>chown $user</code> the mounted volume in the entrypoint script:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;redis-server&#39;</span><span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    chown -R redis .             <span style="color:#75715e"># Fix permissions</span>
    exec gosu redis <span style="color:#e6db74">&#34;</span>$0<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>    <span style="color:#75715e"># Run as `redis` and not `root`</span>
<span style="color:#66d9ef">fi</span></code></pre></div>
<p>I reproduced the same behavior in my Radicale image with Tini:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile">COPY docker-entrypoint.sh /usr/local/bin<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span><span style="color:#e6db74"> [&#34;/sbin/tini&#34;, &#34;--&#34;, &#34;docker-entrypoint.sh&#34;]</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span><span style="color:#e6db74"> [&#34;radicale&#34;, &#34;--config&#34;, &#34;/radicale/config&#34;]</span></code></pre></div>
<p><a href="https://github.com/tomsquest/docker-radicale/blob/master/docker-entrypoint.sh">docker-entrypoint.sh</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;radicale&#39;</span> -a <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>id -u<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    chown -R radicale .
    exec su-exec radicale <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span></code></pre></div>
<p>I used <a href="https://github.com/ncopa/su-exec">Su-exec</a>, a lightweight alternative to Gosu and more importantly,
su-exec is available in Alpine repositories.</p>

<h2 id="s6-the-alternative">S6, the alternative</h2>

<p><a href="https://github.com/just-containers/s6-overlay">S6-Overlay</a> contains the <a href="http://skarnet.org/software/s6/overview.html">S6</a> series of scripts. As <code>overlay</code> they means a tgz to unpack in the image.</p>

<p>S6-Overlay is a complete alternative, it provides:</p>

<ul>
<li>An init system; it could replace Tini.</li>
<li>A script to fix permissions (custom scripts in <code>/etc/fix-attrs.d</code>); replace the <code>chown radicale</code></li>
<li>Dropping privileges; replace Su-Exec</li>
</ul>

<p>I did not had the time to play with S6. The thing is quite complex and powerful, maybe more that what I need.</p>

<h2 id="next">Next</h2>

<p>There are still many things to do <strong>outside</strong> the image itself. I have yet to:</p>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> Manage/Restart the container with Systemd</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Limit the number of automatic restart in Systemd</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Monitor the process in the container</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Limit the container capabilities</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Limit the container networking</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Limit the container resources</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Test automatically the process when rebuilding the image (the Python version is not enforced)</label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> Put the log in their own file and rotate them</label></li>
</ul>

<p>My Radicale image is available at:</p>

<ul>
<li>Docker Hub: <a href="https://hub.docker.com/r/tomsquest/docker-radicale/">https://hub.docker.com/r/tomsquest/docker-radicale/</a></li>
<li>Github: <a href="https://github.com/tomsquest/docker-radicale">https://github.com/tomsquest/docker-radicale</a></li>
</ul>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Working Effectively with Unit Tests by Jay Fields]]></title>
            <link href="http://www.tomsquest.com/blog/2015/03/working-effectively-with-unit-tests/"/>
            <id>http://www.tomsquest.com/blog/2015/03/working-effectively-with-unit-tests/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2015-03-20T00:00:00+00:00</published>
            <updated>2015-03-20T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/wewut-cover.jpg" alt="Book cover" /></p>

<p>I am very happy to have read Jay Fields&rsquo; Working effectively with unit tests.
This is a rare book where developers are taught how to be better at a very-argued discipline: testing.</p>

<p>Jay Fields explains its opinions on how he tests, what he tests and how best he thinks
testing can be done. This is a rare event when somebody explains directly how and why
he write code like that. In my professional life, events like that are not so common,
especially when they are prepared and arguments well presented.</p>

<p>Here are some of my notes :</p>

<h2 id="best-practices">Best practices</h2>

<ul>
<li>Better to have N tests than a single test with a loop</li>
<li>Inline setup is better that referencing a variable</li>
<li>Test names are comments under cover, they will mislead</li>
<li>Data builders is better than globally-defined object with default values (Object Mother)</li>
</ul>

<h2 id="readability">Readability</h2>

<p>Each method added to a test complicates the tiny universe of the tests.
It is hard to know which abstraction will reduce the complexity and provide value.
Being DRY in tests does more harm than good, so repeating ourselves may be better for readability.</p>

<h2 id="roi">ROI</h2>

<p>&ldquo;Productively Unit Testing&rdquo; is evaluating the cost of writing and maintaining a test.
It is acceptable to delete a test after a TDD session or during a code review, if
the value of the test does not seem positive.</p>

<p>Test what seems fragile and is expected to change, ignore the rest.</p>

<h2 id="test-names">Test names</h2>

<p>Test names are comments. They degrade with time, they may be wrong or worse they may mislead.</p>

<p>And, it is rare when a test name tells you what is going wrong. It will just indicate where to
first look at (the body of the test method). So test names are just pointer to code. <strong>The shorter, the better.</strong></p>

<p>&ldquo;Implementation over-specification&rdquo; means a test is fragile because it knows too much about what
it is trying to verify, and that a small change in the production code will break the test.</p>

<p>Solutions are to relax prepartion with Mockito&rsquo;s anyString/anyLong/&hellip; ; Null as a return value is acceptable.</p>

<p>It is simpler and more readable to compare a literal (aka primitive) value, than objects together.</p>

<p>To avoid cascading failures, he only knows two solutions :</p>

<ul>
<li>make the tests more intelligent</li>
<li>make the tests more ignorant.</li>
</ul>

<h2 id="coverage">Coverage</h2>

<p>He aims for 80% of coverage. Going for more that 80% is most likely that the motivation is a better greater number and not the ROI.</p>

<p>Don&rsquo;t forget that it&rsquo;s easy to fake a good coverage with tests without assertion&hellip;</p>

<h2 id="broad-stack-test">Broad Stack Test</h2>

<p>These are End-to-End tests. They are complex and fragile.</p>

<p>He recommends that these tests will survive only if this is the author who maintains them and
not the whole team. And if the author leaves, the time will be best invested recreating those
tests than to try to fix them. I couldn&rsquo;t agree more.</p>

<p>His Mike Cohn Test pyramid is divided into: 1 to 12 Broad Stack Tests, 20% of &ldquo;sociable&rdquo; tests
(tests that interacts with others) and 80% unit tests.</p>

<h2 id="paper-edition">Paper edition</h2>

<p>I read a paper edition, found on Amazon. The overall quality is quite good, but the lack of
emphasis/bold is disturbing on the code samples. Some lines are somewhat bold, but a
vertical line or some ninja-stylized thing could make the UX better.
This is one of the limit of using Markdown for publishing.</p>

<p>But this print edition is way better that the previous book I read (&ldquo;Notes a software team leader&rdquo; by Roy Osherove) where some markdown content was not parsed at all&hellip;</p>

<h2 id="links">Links</h2>

<p>Author&rsquo;s blog: <a href="http://blog.jayfields.com/">http://blog.jayfields.com/</a></p>

<p>The book: <a href="http://signup.wewut.com/">http://signup.wewut.com/</a></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[The Secrets of Consulting by Gerald M. Weinberg]]></title>
            <link href="http://www.tomsquest.com/blog/2014/09/the-secrets-of-consulting/"/>
            <id>http://www.tomsquest.com/blog/2014/09/the-secrets-of-consulting/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2014-09-21T00:00:00+00:00</published>
            <updated>2014-09-21T00:00:00+00:00</updated>
            <content type="html"><![CDATA[<p><img src="/img/posts/the-secrets-of-consulting.jpg" alt="Book cover" /></p>

<p>The book <a href="http://www.amazon.com/The-Secrets-Consulting-Getting-Successfully/dp/0932633013/">&ldquo;Secrets of Consulting&rdquo;</a> by Weinberg stayed for years on my shelve.
I finally found why I did not read it just after I bought it, but why I should have read it before.</p>

<p>The book is about how to work effectively with customers as a consultant. As such, there are topics on changes, pitfalls, problems detection and prevention, but also on personal marketing and pricing.</p>

<p>At the end (~10-15 hours of reading), I still have a mixed feeling about the book. At first, the chapters seem very interesting with subjects on real problems, like how to deal with resistance and avoiding traps ; subjects you have to be good at. But part of the content is blurred in &ldquo;laws&rdquo; which either make sense or are hard to get. An example of a good one is &ldquo;Change comes from stability&rdquo;.</p>

<p>This is the spirit of the book: telling stories (true ones?), enumerating laws (5 to 10 per chapters) and no summary. At the end of some chapters, I was a bit advanced on the subject or deeply lost (moment like &ldquo;what the heck? what can I use <strong>now</strong>?&ldquo;)</p>

<p>Gerald Weinberg is a great story teller. His human skills seems impressive and I would pay to see him in action. There are stories that will make you laugh, and some good examples of human tricks (for example: how he deals with a guy always telling &ldquo;it won&rsquo;t work, we already tried that&rdquo;).</p>

<p>I would have preferred chapters to be a bit more detailed, or maybe more precise.
Don&rsquo;t expect recipes and bullet points. It is more about stories and broad ideas.</p>

<p>Maybe the underlying idea of Weinberg was not to provide common sense, but instead make you think deeply (hence the paradoxical laws) and to &ldquo;plant the seed&rdquo; which will make you a better consultant (chapter 14 is about farming&hellip; yes, plant/seed/soil).</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Learning to touch type using the Colemak layout]]></title>
            <link href="http://www.tomsquest.com/blog/2014/09/learning-to-touch-type/"/>
            <id>http://www.tomsquest.com/blog/2014/09/learning-to-touch-type/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2014-09-03T00:00:00+00:00</published>
            <updated>2014-09-03T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>I was always interested in keyboards and keyboard layouts: typing faster, reducing wrist injuries and morover never looking back at my keyboard. After all Azerty/Qwerty were not made for developers. So last year, I decided to spend some time learning to touch type using a new layout, the <a href="http://colemak.com/">Colemak</a>.</p>

<p>This is the result on my experience on learning to touch type and how I remapped my brain (hard!) during a two-month period.</p>

<h2 id="colemak">Colemak</h2>

<p>As per the official site: &ldquo;Colemak is a modern alternative to the QWERTY and Dvorak layouts, for English&rdquo;.</p>

<p>I chose Colemak, because it beats Dvorak slightly at speed and it only changes seventeen keys on the Qwerty layout (compared to 24 for the Dvorak). Thus, it is easier to learn. It is also an international layout so I can type French accentuated characters.</p>

<p>Here is a visual of the Colemak layout:</p>

<p><img src="/img/posts/colemak_layout.png" alt="Colemak layout" /></p>

<h2 id="learning">Learning</h2>

<p><img src="/img/posts/colemak_first20thhours_book.jpg" title="Book cover the First 20th hours" style="float:right"></p>

<p>I used the method of the book <a href="http://first20hours.com/">&ldquo;The First 20 Hours&rdquo;</a> by Josh Kaufman, the author behind the Personal MBA. This is an interesting book on how to learn (anything) fast. It contains two chapters on learning and how to do it well and a set of chapters on what the author learned : Yoga, Go, Programming, Ukulele and particularly <strong>Touch typing</strong>. It&rsquo;s basically the <sup>80</sup>&frasl;<sub>20</sub> rules applied to learning.</p>

<p>The recipe involves deconstructing the subject of learning, getting the tools at hand, removing the obstacles and practicing for at least 20 hours to bypass the &ldquo;barrier of exasperation&rdquo;. Yes, this statement is really important.</p>

<p>On any hard enough activity, there is a barrier, which once crossed, will make you feel happy. And before it sucks, really. The barrier is at a moment between hard to practice and enough-good to take some pleasure. Try playing the guitar for the first time. For the author, the barrier is around 20th hours; depending of the subject and the learner.</p>

<p>I found the chapter of becoming a touch typist to be an excellent motivator because I was following the steps of an already successful learner and therefore knowing that I will surely succeed at the end.</p>

<h2 id="keyboard">Keyboard</h2>

<p>According the book, I had to get the needed tools to practice and to measure myself.</p>

<p>First thing first: the keyboard. You can take an old keyboard, move the keycaps around and voilà, you&rsquo;re done. Or you can be a good consumer and buy a shiny piece of plastic.</p>

<p>One of my <a href="https://twitter.com/BitardMichael">teammate</a> was using a <a href="http://www.typematrix.com/">Typematrix</a> keyboard, a nice piece of hardware. The keyboard itself is small, not ergonomic, but it has a matrix design (hence the name) and it is one of the cheapest when considering to buy a blank keyboard.</p>

<p>Yes, completely <strong>blank</strong> ! Like with nothing written on it. I do think this is the way to go to be a full touch typist and to never have a hope to give a look to find that key/letter/number you wanted to type. Truth is that it is sometimes disappointing for rarely used keys, or Page-Up/down keys which are fay away (you have to move your hand, so you lose a bit of precision). The company sold skins, sort of condoms to protect the keyboard, with small indications on them (special keys) that may be useful.</p>

<p>The Typematrix blank keyboard:</p>

<p><img src="/img/posts/colemak_typematrix_blank.png" alt="Typematrix Blank" /></p>

<h2 id="typing-trainers">Typing trainers</h2>

<p>Two recommended typing trainers are <a href="https://first20hours.github.io/keyzen-colemak/">Keyzen</a> and <a href="https://code.google.com/p/amphetype/">Amphetype</a>. The first will get you mad and the second will make you cry :-) .</p>

<p>I started with Keyzen and my first hours of learning were completely boring but very rewarding. A session of Keyzen gives something like: Type &lsquo;nnnttttntntn&rsquo;, then &lsquo;ntenntteetnte&rsquo;, then restart because you made a mistake. After two hours, my progress were real and after six hours I completely managed the English layout. I was still discovering how to touch type, so I was very motivated.</p>

<p>Then, I started to practice with Amphetype. This tool is very handy because you can import your own set of words to learn, shuffle them and measure your progress by session, sitting or days (On Linux, just checkout the source and voilà).</p>

<p>Repeating and repeating exercises were very boring, especially at 21 o&rsquo;clock when you have so much more distracting thing to do.</p>

<h2 id="deliberate-practice">Deliberate practice</h2>

<p>If you think a little bit about typing, you already knows that:</p>

<ul>
<li>some words are typed more than others, like: the, of, and, to, in&hellip;</li>
<li>some letters occur more often (that why the Colemak layout exits)</li>
<li>bigrams (two-letter), trigrams and quadrigrams can be extracted to find recurring patterns</li>
</ul>

<p>Which means: to type fast/faster, my brain and fingers have to learn the most used words and behind that the most used couples of letters.
For example, when my eyes read &ldquo;the&rdquo;, I should not think &ldquo;t&rdquo;, &ldquo;h&rdquo;, &ldquo;e&rdquo; but it should be a reflex for my fingers (kind of burst typing).
This is <a href="https://en.wikipedia.org/wiki/Practice_%28learning_method%29#Deliberate_practice"><strong>deliberate practice</strong></a>. I had to learn effectively and efficiently (do the right thing right).</p>

<p>Josh Kaufman gives a link to the most used English words and bigrams, but I had to build mine for French, especially to learn accentuated characters.
If you need mines, I should be able to export it from Amphetype.</p>

<h2 id="progress">Progress</h2>

<p>It was easy to start, I was very passionate about the subject, but it was hard to achieve my goal.</p>

<p>I targeted 60 WPM (words per minutes) for the end of November. I had two months to practice, which should be largely sufficient to find 20 hours of free-time (which is mostly prioritizing).</p>

<p>In October and November 2013, I track my sessions using a Seinfeld calendar (also named &ldquo;Don&rsquo;t break the chain&rdquo;). It is a simple calendar where you circle days of practice and the circles make a chain that you should not break. It is a good visual motivator.</p>

<p>Amphetype gave my speed in WPM and my error rate by session and the calendar was stuck to the wall (hard to miss it).</p>

<p>Here is my seinfeld calendar:</p>

<p><img src="/img/posts/colemak_seinfeld_calendar.jpg" alt="Seinfeld calendar" /></p>

<p>I was really motivated in October and less in November (also due to a lot of work). But this is generally how things evolve.</p>

<p>I started using Amphetype when I was already at 20 WPM because I trained on <a href="https://chrome.google.com/webstore/detail/type-fu/pofoighmmpljaikjiidkkfhldjndfdbk">TypeFu</a> at that time.</p>

<p>Then I think I hit the <sup>40</sup>&frasl;<sub>50</sub> WPM mark at the end of November. Of course, speed depends on what I typed and in which language.
I completely stopped deliberate practice after a few sessions in December and January.</p>

<h2 id="today">Today</h2>

<p>When writing this article, and with looking at 10 month back, I am pretty happy with my results. It was hard, and harder that I thought.</p>

<p>Today, I am near 60 words-per-minutes and I don&rsquo;t think I will go much further without typing more and exercising. I am near my level on Azerty, but I don&rsquo;t have so many reflex that experience gives. When I talk about reflex, I am speaking of typing in burst without thinking about it.</p>

<p>I feel very comfortable with the keyboard, my fingers move less, I can type numbers and punctuation without looking at the keyboard.
I still make typing errors, but a lot less than in Azerty.</p>

<p>Graph of my speed (WPM) from October to November (on Amphetype), French and English (all results merged). The progress is slow, but steady:</p>

<p><img src="/img/posts/colemak_amphetype_progress.png" alt="Speed result" /></p>

<p><em>This post was written in Colemak on a blank Typematrix keyboard.</em></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[An introduction to Java Agent and bytecode manipulation]]></title>
            <link href="http://www.tomsquest.com/blog/2014/01/intro-java-agent-and-bytecode-manipulation/"/>
            <id>http://www.tomsquest.com/blog/2014/01/intro-java-agent-and-bytecode-manipulation/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2014-01-30T00:00:00+00:00</published>
            <updated>2014-01-30T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>A few months ago, I wrote a little shell script to colorize Maven&rsquo;s output
(see <a href="http://tomsquest.com/blog/2013/09/maven-in-colors">this post</a>).
This is a good solution, but <a href="https://twitter.com/jchristophegay">Jean-Christophe Gay</a> has written a pure Java version
to solve the same problem with interesting bits of Java technologies.</p>

<p>In this post, we will see how a Java Agent and some bytecode manipulation can open the inner guts of code we don&rsquo;t own.</p>

<h2 id="code-sample">Code sample</h2>

<p>I wrote a little test project to wire the stuff involved.
There are two Maven module, one for the Agent and one for representing the external lib (we should not modify it).
The whole code is here : <a href="https://github.com/tomsquest/java-agent-asm-javassist-sample">https://github.com/tomsquest/java-agent-asm-javassist-sample</a></p>

<h3 id="agent">Agent</h3>

<p>First, we need a Java Agent to inject and intercept real code.
The agent framework is part of the JDK and allow us to operate on classes before (and even after) they are used.</p>

<p>Here is the code of the Agent. Note the premain static method which is called at start.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Agent</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">premain</span><span style="color:#f92672">(</span>String agentArgs<span style="color:#f92672">,</span> Instrumentation inst<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        inst<span style="color:#f92672">.</span><span style="color:#a6e22e">addTransformer</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Transformer<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#a6e22e">@Override</span>
            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">transform</span><span style="color:#f92672">(</span>ClassLoader classLoader<span style="color:#f92672">,</span> String s<span style="color:#f92672">,</span> Class<span style="color:#f92672">&lt;?&gt;</span> aClass<span style="color:#f92672">,</span> ProtectionDomain protectionDomain<span style="color:#f92672">,</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IllegalClassFormatException <span style="color:#f92672">{</span>

                <span style="color:#75715e">// Intercept the call to the class Stuff
</span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;other/Stuff&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                    <span style="color:#75715e">// ASM Code
</span><span style="color:#75715e"></span>                    ClassReader reader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ClassReader<span style="color:#f92672">(</span>bytes<span style="color:#f92672">);</span>
                    ClassWriter writer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ClassWriter<span style="color:#f92672">(</span>reader<span style="color:#f92672">,</span> 0<span style="color:#f92672">);</span>
                    ClassPrinter visitor <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ClassPrinter<span style="color:#f92672">(</span>writer<span style="color:#f92672">);</span>
                    reader<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">(</span>visitor<span style="color:#f92672">,</span> 0<span style="color:#f92672">);</span>
                    <span style="color:#66d9ef">return</span> writer<span style="color:#f92672">.</span><span style="color:#a6e22e">toByteArray</span><span style="color:#f92672">();</span>
                <span style="color:#f92672">}</span>

                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>The agent is called because the JVM is launched with the -javaagent:myjar.jar parameter and because the Manifest indicates this class.</p>

<p>Command line :</p>

<pre><code>$ java -javaagent:agent/target/agent-0.1-SNAPSHOT.jar -jar other/target/other-0.1-SNAPSHOT.jar
</code></pre>

<h3 id="asm">ASM</h3>

<p>In order to manipulate the bytecode, I used the ASM framework.
<a href="http://asm.ow2.org">ASM</a> is a Java bytecode manipulation and analysis framework used in many products.</p>

<p>In the example above, the ClassPrinter prints the signatures of the classes and methods visited.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClassPrinter</span> <span style="color:#66d9ef">extends</span> ClassVisitor <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ClassPrinter</span><span style="color:#f92672">(</span>ClassWriter writer<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ASM4</span><span style="color:#f92672">,</span> writer<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">visit</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> version<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> access<span style="color:#f92672">,</span> String name<span style="color:#f92672">,</span> String signature<span style="color:#f92672">,</span> String superName<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> interfaces<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; extends &#34;</span> <span style="color:#f92672">+</span> superName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; {&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">visit</span><span style="color:#f92672">(</span>version<span style="color:#f92672">,</span> access<span style="color:#f92672">,</span> name<span style="color:#f92672">,</span> signature<span style="color:#f92672">,</span> superName<span style="color:#f92672">,</span> interfaces<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> MethodVisitor <span style="color:#a6e22e">visitMethod</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> access<span style="color:#f92672">,</span> String name<span style="color:#f92672">,</span> String desc<span style="color:#f92672">,</span> String signature<span style="color:#f92672">,</span> String<span style="color:#f92672">[]</span> exceptions<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">+</span> name <span style="color:#f92672">+</span> desc<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">visitMethod</span><span style="color:#f92672">(</span>access<span style="color:#f92672">,</span> name<span style="color:#f92672">,</span> desc<span style="color:#f92672">,</span> signature<span style="color:#f92672">,</span> exceptions<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">visitEnd</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">visitEnd</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>Here is the output, as we intercepted the call to the <code>Stuff</code> class :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">other<span style="color:#f92672">/</span>Stuff <span style="color:#66d9ef">extends</span> java<span style="color:#f92672">/</span>lang<span style="color:#f92672">/</span>Object <span style="color:#f92672">{</span>
 <span style="color:#f92672">&lt;</span>init<span style="color:#f92672">&gt;()</span>V
 <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span>V
<span style="color:#f92672">}</span>
I AM DOING SOME STUFF<span style="color:#f92672">...</span></code></pre></div>
<h3 id="javassist">Javassist</h3>

<p>Javassist is another bytecode manipulation framework. I found it simpler due to higher level methods like addLocalVariable, insertBefore, insertAfter&hellip;</p>

<p>Here is a version of the Agent used to output the elapsed time for executing the <code>run</code> method :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Agent</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">premain</span><span style="color:#f92672">(</span>String agentArgs<span style="color:#f92672">,</span> Instrumentation inst<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        inst<span style="color:#f92672">.</span><span style="color:#a6e22e">addTransformer</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ClassFileTransformer<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#a6e22e">@Override</span>
            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">transform</span><span style="color:#f92672">(</span>ClassLoader classLoader<span style="color:#f92672">,</span> String s<span style="color:#f92672">,</span> Class<span style="color:#f92672">&lt;?&gt;</span> aClass<span style="color:#f92672">,</span> ProtectionDomain protectionDomain<span style="color:#f92672">,</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IllegalClassFormatException <span style="color:#f92672">{</span>

                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;other/Stuff&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                    <span style="color:#75715e">// Javassist
</span><span style="color:#75715e"></span>                    <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
                        ClassPool cp <span style="color:#f92672">=</span> ClassPool<span style="color:#f92672">.</span><span style="color:#a6e22e">getDefault</span><span style="color:#f92672">();</span>
                        CtClass cc <span style="color:#f92672">=</span> cp<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;other.Stuff&#34;</span><span style="color:#f92672">);</span>
                        CtMethod m <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span><span style="color:#a6e22e">getDeclaredMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;run&#34;</span><span style="color:#f92672">);</span>
                        m<span style="color:#f92672">.</span><span style="color:#a6e22e">addLocalVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;elapsedTime&#34;</span><span style="color:#f92672">,</span> CtClass<span style="color:#f92672">.</span><span style="color:#a6e22e">longType</span><span style="color:#f92672">);</span>
                        m<span style="color:#f92672">.</span><span style="color:#a6e22e">insertBefore</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;elapsedTime = System.currentTimeMillis();&#34;</span><span style="color:#f92672">);</span>
                        m<span style="color:#f92672">.</span><span style="color:#a6e22e">insertAfter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{elapsedTime = System.currentTimeMillis() - elapsedTime;&#34;</span>
                                <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;System.out.println(\&#34;Method Executed in ms: \&#34; + elapsedTime);}&#34;</span><span style="color:#f92672">);</span>
                        <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> byteCode <span style="color:#f92672">=</span> cc<span style="color:#f92672">.</span><span style="color:#a6e22e">toBytecode</span><span style="color:#f92672">();</span>
                        cc<span style="color:#f92672">.</span><span style="color:#a6e22e">detach</span><span style="color:#f92672">();</span>
                        <span style="color:#66d9ef">return</span> byteCode<span style="color:#f92672">;</span>
                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                        ex<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
                    <span style="color:#f92672">}</span>
                <span style="color:#f92672">}</span>

                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">});</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>Output :</p>

<pre><code>I AM DOING SOME STUFF...
Method Executed in ms: 1
</code></pre>

<h2 id="real-case-maven-colorization">Real case : Maven colorization</h2>

<p><a href="https://twitter.com/jchristophegay">Jean-Christophe Gay</a> hacked Maven to colorize the output and to highlight warnings and errors.
And it did that without altering Maven, but from the outside.
The idea is to start Maven with an agent which enhance Maven (3.0) output with colorization.</p>

<p>It is interesting as a real world scenario because Maven does not expose an API to access the log in real time, and also
because one needs to know exactly where to inject the custom code and how fragile it is to hack
a third-party piece of code.</p>

<p>You can see his code here : <a href="https://github.com/jcgay/maven-color">https://github.com/jcgay/maven-color</a></p>

<p>In its code, the author had to :</p>

<ul>
<li>start the agent when the target program is run, this was done using the MAVEN_OPTS environment variable</li>
<li>find where Maven was outputting relevant logs message (well, this has to be done for Maven and Surefire, which is even
more susceptible to change.</li>
</ul>

<p>For example, this is how the new method for output colorization is created with pure bytecode injection, using ASM :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">createSetupAnsiColorLoggerMethod</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    MethodVisitor mv <span style="color:#f92672">=</span> cv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitMethod</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ACC_PRIVATE</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;setupLogger&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;(Lorg/apache/maven/cli/MavenCli$CliRequest;)Lorg/codehaus/plexus/logging/Logger;&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitCode</span><span style="color:#f92672">();</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitTypeInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">NEW</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;com/github/jcgay/maven/color/logger/AnsiColorLogger&#34;</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">DUP</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitMethodInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">INVOKESPECIAL</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;com/github/jcgay/maven/color/logger/AnsiColorLogger&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;&lt;init&gt;&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;()V&#34;</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitVarInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ASTORE</span><span style="color:#f92672">,</span> 2<span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitVarInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ALOAD</span><span style="color:#f92672">,</span> 2<span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitVarInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ALOAD</span><span style="color:#f92672">,</span> 1<span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitFieldInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">GETFIELD</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;org/apache/maven/cli/MavenCli$CliRequest&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;request&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Lorg/apache/maven/execution/MavenExecutionRequest;&#34;</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitMethodInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">INVOKEINTERFACE</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;org/apache/maven/execution/MavenExecutionRequest&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;getLoggingLevel&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;()I&#34;</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitMethodInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">INVOKEINTERFACE</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;org/codehaus/plexus/logging/Logger&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;setThreshold&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;(I)V&#34;</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitVarInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ALOAD</span><span style="color:#f92672">,</span> 2<span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitInsn</span><span style="color:#f92672">(</span>Opcodes<span style="color:#f92672">.</span><span style="color:#a6e22e">ARETURN</span><span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitMaxs</span><span style="color:#f92672">(</span>2<span style="color:#f92672">,</span> 3<span style="color:#f92672">);</span>
    mv<span style="color:#f92672">.</span><span style="color:#a6e22e">visitEnd</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>Reading <a href="http://www.slideshare.net/CharlesNutter/javaone-2011-jvm-bytecode-for-dummies">Bytecode for Dummies</a> will help, for sure.</p>

<p>For another real world usage, there is <a href="https://www.jboss.org/byteman">Byteman</a> written by JBoss.
This tool simplifies testing of Java programs. The documentation is difficult to read, IMHO, but the presentation I
saw three years ago was really stunning. Byteman can be used to make untestable code testable.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Créer son EURL et devenir indépendant : les étapes]]></title>
            <link href="http://www.tomsquest.com/blog/2014/01/creer-son-eurl/"/>
            <id>http://www.tomsquest.com/blog/2014/01/creer-son-eurl/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2014-01-07T00:00:00+00:00</published>
            <updated>2014-01-07T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>J&rsquo;ai créé mon EURL courant octobre-novembre et je suis donc maintenant indépendant.
Dans cet article, je liste les étapes qui m&rsquo;ont permis de créer la société.
Le parcours était finalement simple, même si beaucoup de questions se sont posées.
Je suis parti avec une rupture conventionnelle, j&rsquo;intègre donc les éléments Pole-Emploi.</p>

<p>Je ne me substitue pas à l&rsquo;APCE (maintenant AFE &ldquo;Agence France Entrepreneur&rdquo;), ni à un expert-comptable. Je ne vais pas rentrer en détail sur les choix fiscaux car c&rsquo;est un sujet complexe et j’y perdrai la tête.
J’indique donc mes choix qui sont aussi ceux de plusieurs personnes autour de moi.
Faites vos propres recherches pour compléter et bien comprendre le processus.</p>

<h2 id="les-étapes">Les étapes</h2>

<p>Dans l&rsquo;ordre, j&rsquo;ai réalisé les actions suivantes :</p>

<ol>
<li>Inscription à Pole-Emploi car rupture conventionnelle</li>
<li>Publication d’une annonce légale</li>
<li>Ouverture d’un compte pro dans une banque pour déposer le capital</li>
<li>Envoi du dossier complet sur Guichet-entreprises.fr</li>
<li>Envoi de la demande d’Accre</li>
<li>Envoi des documents pour me mettre en création d&rsquo;entreprise à Pole-Emploi</li>
<li>Dépôt des statuts aux impôts</li>
<li>Signature avec un cabinet d&rsquo;expert-comptable</li>
</ol>

<h2 id="inscription-à-pole-emploi">Inscription à Pole-Emploi</h2>

<p>Je suis parti avec une rupture conventionnelle, c’est à dire que je suis un futur chômeur indemnisable.
L’intérêt est que Pole-Emploi peut me verser des allocations chômage pendant 15 mois ou du capital (45% du montant des droits) permettant de démarrer une activité.</p>

<p>Inscrit le premier jour de &ldquo;liberté salariale&rdquo;, j’ai eu mon rendez-vous Pole-Emploi trois semaines plus tard.
Ce rendez-vous a duré 5 minutes, le temps d’être recalé car je n&rsquo;avais pas de pièce d&rsquo;identité (non le permis n&rsquo;est pas une pièce d&rsquo;identité,
et non ma conseillère n&rsquo;a pas voulu que je la dépose ensuite). C&rsquo;est ma faute, c&rsquo;est écrit sur les papiers fournis.</p>

<p>Le rendez-vous suivant s&rsquo;est passé sans soucis, j&rsquo;avais les documents relatifs à ma rupture conventionnelle,
mes bulletins de paie et tout ce que j&rsquo;ai pu prendre avec moi (acte de naissance, prélèvement sanguin, biographie de mon chat, empreinte génitale…).</p>

<p>Victoire, je suis reparti avec ma carte d&rsquo;inscription.</p>

<p>C&rsquo;est seulement après cette étape qu’il est possible de déposer son dossier de création d&rsquo;entreprise.
Attention, ne faites pas l’inverse, ne créer pas la société avant votre inscription sinon vous risquez de ne pas être indemnisable.</p>

<h2 id="annonce-légale">Annonce légale</h2>

<p>Une étape très simple : il s’agit d’envoyer à un journal de petites annonces légales une demande de publication d’une annonce pour la création d’une entreprise.
Vous trouverez sur internet les journaux habilités à publier des annonces légales (le CFE en donne également).
Il faut faire des devis car on paie au caractère.</p>

<p>Ce modèle est optimisé pour minimiser le coût : <a href="/files/eurl/annonce_legale.rtf">annonce legale.rtf</a></p>

<p>Les échanges que j’ai eu avec le journal :</p>

<ol>
<li>demande de devis pour le texte suivant</li>
<li>paiement par chèque d’un montant de 74,42 euros TTC</li>
<li>réception de l’attestation de parution</li>
</ol>

<h2 id="choisir-une-banque">Choisir une banque</h2>

<p>La personne morale (la société) doit avoir un compte à son nom.
Il serait possible d&rsquo;ouvrir en autre compte personnel qui serait utilisé par la personne morale, mais le gérant s&rsquo;expose
alors au risque que son patrimoine personnel se confonde au patrimoine de la société. La responsabilité limitée de la société serait donc remise en cause.
De plus, les conditions générales de certaines banques l&rsquo;interdisent (i.e. pas de société sur un compte personnel).</p>

<p>Bref, le compte pro est quasi-obligatoire.</p>

<p>Coût moyen : ~300 euros de charges par an (~ 22 euros par mois HT).</p>

<p>J’ai choisis HSBC, j’ai rempli la dizaine de pages de leur dossier et joint un chèque de 2000 euros comme montant du capital.</p>

<p>J’ai reçu l’attestation de dépôts une semaine et quelques jours après (et suite à une confirmation avec un de leur conseiller).
Ce document est requis pour le dossier de création de la société.</p>

<h2 id="eurl-sasu-ou-autoentrepreneur">EURL, SASU ou Autoentrepreneur</h2>

<p>Vaste sujet que je résume ainsi :</p>

<ul>
<li>EURL car c&rsquo;est le type de société de 80% des indépendants en informatique, les comptables connaissent bien, beaucoup d’information sur internet</li>
<li>SASU : c&rsquo;est devenu à la mode depuis la taxation des dividendes arrivée en 2013, mais il reste encore un léger avantage fiscal pour l&rsquo;EURL.
La SASU offre une meilleure protection sociale pour le gérant aux détriments de charges plus importantes.
On évite aussi le RSI qui cause de nombreux problèmes, c&rsquo;est un argument de poids pour certains.</li>
<li>Autoentrepreneur : 32K de chiffre d&rsquo;affaire, c&rsquo;est trop peu</li>
</ul>

<h2 id="les-statuts">Les statuts</h2>

<p>Les statuts sont une pièce importante du dossier, mais l’AFE fournit des statuts simplifiés prenant 2 pages et couvrant la situation classique de tout le monde.
C’est ce modèle que j’ai utilisé. Libre à vous de comparer avec les modèles sur Internet.</p>

<p>Le modèle de statut simplifié est disponible ici : <a href="https://www.afecreation.fr/cid46379/modele-statuts-types-eurl.html">https://www.afecreation.fr/cid46379/modele-statuts-types-eurl.html</a> (<a href="/files/eurl/afe_modele_statuts_types_eurl.txt">copie</a>)</p>

<p>Il existe également un modèle de statuts plus complet : <a href="https://media.afecreation.fr/file/03/3/statuts_eurl_(2016).37033.doc">https://media.afecreation.fr/file/03/3/statuts_eurl_(2016).37033.doc</a> (<a href="/files/eurl/afe_statuts_eurl.doc">copie</a>)</p>

<p>A vous de remplir les cases.</p>

<h2 id="le-dossier-sur-guichet-entreprise">Le dossier sur Guichet-Entreprise</h2>

<p>Une liste d&rsquo;écrans vous attend et une fois en fin du processus et les documents rattachés au dossier, vous pourrez payer en ligne. Vous recevrez alors votre Kbis quelques jours plus tard.</p>

<p>Le kbis est le document contenant le numéro Siret et qui atteste de l’existence de votre société.</p>

<p>Après réception de mon Kbis (ou juste avant je ne sais plus), j’ai reçu un courrier du CFE me demandant de compléter la liasse TNS (Travailleur Non Salarié)
car apparemment le dossier transmis par internet n’était pas complet. Hop, un petit formulaire papier a compléter, ça ne fait pas trop de mal.</p>

<p>Voici mes réponses aux questions techniques posées sur les écrans (choix classiques simples) :</p>

<ul>
<li>Régime d’imposition des bénéfices : Réel simplifié IS</li>
<li>Régime d’imposition de la TVA : Réel simplifié</li>
<li>Exercice fiscal : la première période sera longue, de 2013 au 31 décembre 2014 puis exercices normaux, du 1er janvier au 31 décembre</li>
</ul>

<p>Les documents à fournir (de mémoire) :</p>

<ul>
<li>Statuts signés (donc à imprimer, scanner puis uploader)</li>
<li>Attestation de dépôts des fonds fournis par la banque</li>
<li>Attestation de parution de l’annonce légale envoyée par le journal après paiement</li>
<li>Attestation de non-condamnation avec filiation (modèle : <a href="/files/eurl/declaration_non_condamnation.rtf">declaration non condamnation.rtf</a>)</li>
<li>Carte d&rsquo;identité avec la mention sur l’honneur (donc à imprimer, annoter avec la mention sur l’honneur indiquée sur le site puis à uploader)</li>
<li>Copie du bail car je suis locataire : la société est domicilié chez moi et même si mon bail indique que je ne peux pas y avoir d’activité commerciale,
c’est toléré pendant 5 ans (attention changer de domiciliation coûte de l’argent)</li>
</ul>

<p>Coût : ~80 euros, payable en ligne.</p>

<h2 id="envoi-de-la-demande-d-accre">Envoi de la demande d’Accre</h2>

<p>L’Accre est une exonération de charge pour le chômeur créateur d’entreprise. Je vous envoie au site de l’APCE pour les infos.
L’intérêt est de payer moins de taxe sur la rémunération que vous vous verserez.</p>

<p>J’ai fait la demande d’Accre car il me semblait qu’elle était obligatoire pour le maintien des allocations chômage,
mais j’ai cru comprendre que j’aurai pu m’en passer. A confirmer dans votre cas, trop tard pour moi.</p>

<p>J’ai envoyé ma demande d’Accre juste après mon inscription à Pole-Emploi. C’est un formulaire simple.
Vous recevrez une confirmation d’accord quelques semaines après.</p>

<h2 id="le-dépôt-aux-impôts">Le dépôt aux impôts</h2>

<p>Les impôts vont conserver un exemplaire de vos statuts pour archive. Vous avez un mois pour aller déposer les statuts.
Il faut se rendre là-bas avec 4 ou 5 exemplaires signés qu’ils tamponneront et ils en garderont un.</p>

<p>Trouvez le service des impôts par rapport à votre adresse et rendez-vous là-bas.
Ne faites pas la queue, il y a un service Entreprise.
A 8h30, ils ont accepté de tamponner mes statuts dans la foulée, m&rsquo;évitant un nouveau déplacement pour les récupérer.
Je suis parti 7 minutes plus tard. Great !</p>

<p>Le dépôt des statuts est gratuit et il est apparemment possible d&rsquo;envoyer les statuts par courrier avec une enveloppe
affranchie pour le retour, mais je n&rsquo;ai pas testé.</p>

<p>Dans un futur proche, il se pourrait que ce passage aux impôts soit inutiles, puisque ce sera le CFE qui leur
transmettra le document car vous leur avait déjà fourni vos statuts par Guichet-Entreprise.</p>

<h2 id="envoi-des-documents-à-pole-emploi">Envoi des documents à Pole-Emploi</h2>

<p>Pour signifier à Pole-Emploi que vous souhaitez créer votre société, vous devez envoyer :</p>

<ul>
<li>un Kbis (j’ai envoyé un original)</li>
<li>vos statuts</li>
<li>une lettre expliquant ce que vous souhaitez faire : pour moi, maintien des allocations ou versement du capital, <a href="/files/eurl/courrier_poleemploi_creation_societe.rtf">cf la lettre que j’ai envoyé</a></li>
<li>une copie signée du PV d’AG (Procès Verbal d’Assemblée Générale) déclarant la rémunération que vous souhaitez vous verser : <a href="/files/eurl/pv_ag_non_remuneration.rtf">modèle PV AG</a></li>
</ul>

<p>Dans mon cas, j’ai rédigé un PV d’AG stipulant ma non-rémunération pour 2013 et 2014. Bien sûr, si je suis amené à me verser
une rémunération, je dois en avertir Pole-Emploi, et de toute façon, mes déclarations au RSI leur permettront de savoir ce que je me suis versé.</p>

<h2 id="cabinet-comptable">Cabinet comptable</h2>

<p>Un cabinet comptable est obligatoire pour ce type de structure car il y a un certain nombre de documents légaux à produire pour chaque exercice fiscal.
L&rsquo;expert-comptable engage également sa responsabilité pour une partie de la gestion que vous ferez.</p>

<p>Le cabinet avec qui j&rsquo;ai signé m&rsquo;a été conseillé par un ami (<a href="http://www.cestpasdur.com">Damien Gouyette</a>). Je vous recommande de faire marcher votre réseau,
car il y a tout dans ce monde. Le premier critère est d&rsquo;avoir quelqu&rsquo;un qui sait de quoi il parle, qui vous conseille, plutôt que quelqu&rsquo;un qui ne s&rsquo;occupe
que de la paperasse.</p>

<p>Coût pour une année : entre 1500 et 2500 euros HT en fonction des prestations (j&rsquo;ai choisi de faire ma saisie, je scanne les docs mais j&rsquo;aurai pu leur déléguer).</p>

<h2 id="la-suite">La suite</h2>

<p>Dans les semaines qui vont suivre l’immatriculation de la société, vous allez recevoir tout un tas de papier utiles et inutiles :
immatriculation Urssaf, cotisation sociale pour les salariés (oui, même pour une entreprise uni-personnelle)&hellip;</p>

<p>L’ensemble de la procédure m’as pris entre 3 et 4 semaines, car il est possible de lancer la procédure de compte pro avant le rendez-vous Pole-Emploi,
idem pour l’annonce légale et de soumettre le dossier de création le lendemain de l’inscription en tant que chômeur.</p>

<p>Maintenant que la société est née, il reste la partie la plus importante : trouver une mission intéressante et un client à aider.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Maven in colors]]></title>
            <link href="http://www.tomsquest.com/blog/2013/09/maven-in-colors/"/>
            <id>http://www.tomsquest.com/blog/2013/09/maven-in-colors/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2013-09-30T00:00:00+00:00</published>
            <updated>2013-09-30T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/2013/maven-logo.png" style="float:right"/></p>

<p><em>Updated the 2014.01.21 - Added JCGay Maven Agent</em></p>

<p>Maven output is quite pale. Want to see some green for successes, red for failures and yellow for warnings ?
Let&rsquo;s see how to do it.</p>

<p>This post is an enhanced version of several shell scripts (like this <a href="https://github.com/builddoctor/maven-antsy-color">one</a>)
or Arnaud Heritier&rsquo;s log4j2 approach : <a href="http://aheritier.net/united-colors-of-maven/">United Colors of Maven</a>.</p>

<h2 id="how-it-looks">How it looks</h2>

<p>Here is a screenshot of a successful build :</p>

<p><img src="/img/posts/2013/maven-colors-success.png" alt="Maven successful build with colors" /></p>

<p>Screenshot of a failed build :</p>

<p><img src="/img/posts/2013/maven-colors-failure.png" alt="Maven failed build with colors" /></p>

<h2 id="preferred-solution-shell-function">Preferred solution : shell function</h2>

<p>My preferred solution is to pipe Maven&rsquo;s output to <strong>sed</strong> and to insert Ansi color sequences at the correct locations.
It is done like this :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mvn $goal | sed -e <span style="color:#e6db74">&#39;/BUILD SUCCESS/$red BUILD SUCCESS/&#39;</span></code></pre></div>
<p>In reality, it is a bit more complex because we want to return the exit code of the maven command
and not the one of sed or the other chained command.</p>

<p>The shell function (zsh and bash compatible) is available at :
<a href="https://github.com/tomsquest/dotfiles/blob/master/zsh/functions/mvn-in-colors.zsh">https://github.com/tomsquest/dotfiles/blob/master/zsh/functions/mvn-in-colors.zsh</a></p>

<p>You just have to put this file somewhere, source it and make an alias to mvn :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ source mvn-in-colors.zsh
$ alias mvn<span style="color:#f92672">=</span>mvn-in-colors <span style="color:#75715e"># done !</span></code></pre></div>
<h3 id="restrictions">Restrictions</h3>

<p>Using this method does not work when Maven asks for input, for example when using the release:prepare goal.</p>

<p>Workaround :</p>

<ul>
<li>Ignore the alias with <code>\mvn</code> when releasing</li>
<li>Don&rsquo;t use the release plugin and prefer the solution of Axel Fontaine :
<a href="http://axelfontaine.com/blog/final-nail.html">Maven Release Plugin: The Final Nail in the Coffin</a></li>
</ul>

<h2 id="maven-agent">Maven Agent</h2>

<p>Jean-Christophe Gay wrote an interesting bit of code to handle the problem : a Java agent to hack Maven logging.</p>

<p>The code is here : <a href="https://github.com/jcgay/maven-color">Maven Color on GitHub</a></p>

<h3 id="restrictions-1">Restrictions</h3>

<p>The Readme says the agent will fail when using a plugin using itself a different version of ASM (use to change the bytecode).
See the <a href="https://github.com/jcgay/maven-color#known-issues">Known issues</a>.</p>

<h2 id="rainbow">Rainbow</h2>

<p><a href="https://github.com/nicoulaj/rainbow">Rainbow</a> is a colorizer of commands outputs written in Python.
It uses patterns to match strings to colors.</p>

<p>And <strong>Rainbow supports Maven out of the box</strong>!</p>

<p>Once installed, running Rainbow is as simple as :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ rainbow --config<span style="color:#f92672">=</span>mvn3 -- mvn clean install</code></pre></div>
<h3 id="restrictions-2">Restrictions</h3>

<p>The original Rainbow version does not return the exit code of the specified program (mvn in our case).
This is real problem when you want to chain mvn with a push. ie.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ rainbow --config<span style="color:#f92672">=</span>mvn3 -- mvn clean install <span style="color:#f92672">&amp;&amp;</span> git push <span style="color:#75715e"># will push even if the build failed !</span></code></pre></div>
<p>Some works try to fix the issues of rainbow. The <a href="https://github.com/gfxmonk/rainbow">one from GfxMonk</a> seems to fix the lack of exit code.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Slides of my presentation : DB Migration Automation]]></title>
            <link href="http://www.tomsquest.com/blog/2013/09/database-migration-slides/"/>
            <id>http://www.tomsquest.com/blog/2013/09/database-migration-slides/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2013-09-11T00:00:00+00:00</published>
            <updated>2013-09-11T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>Below are my slides about why and how we automated the migration of our databases.
These slides were created for an internal presentation at my current gig.</p>

<p>We use <a href="http://flywaydb.org">Flyway</a> because it is as simple as it can be and it still delivers a lot of value.</p>

<h2 id="slides">Slides</h2>

<p><p>
<iframe src="http://www.slideshare.net/slideshow/embed_code/26092741" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<p></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Review : Play Framework Cookbook]]></title>
            <link href="http://www.tomsquest.com/blog/2011/10/review-play-framework-cookbook/"/>
            <id>http://www.tomsquest.com/blog/2011/10/review-play-framework-cookbook/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2011-10-06T00:00:00+00:00</published>
            <updated>2011-10-06T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/play_framework_cookbook.jpg" style="float:right"/></p>

<p>Play!, the framework for the bored Java developers ! Very interesting and opinated framework.
I didn&rsquo;t play with it a lot in the previous months, but the new book <a href="http://www.packtpub.com/play-framework-cookbook/book">&ldquo;Play Framework Cookbook&rdquo;</a> by Packt Publishing,
released this summer was a good way to dig into the framework.
The ebook was offered for free to people who wants to review it. No excuse.</p>

<h2 id="contents">Contents</h2>

<p>The chapters are :</p>

<ul>
<li>Basics of the Play Framework</li>
<li>Using Controllers</li>
<li>Leveraging Modules</li>
<li>Creating and Using APIs</li>
<li>Introduction to Writing Modules</li>
<li>Practical Module Examples</li>
<li>Running Into Production</li>
</ul>

<p>Each subsection is divided in parts: &ldquo;Getting ready&rdquo;, &ldquo;How to do it&rdquo;, &ldquo;How it works&rdquo;, &ldquo;There&rsquo;s more&rdquo;, &ldquo;See also&rdquo;.
The most interesting part for me is the explanation of the internals, not the &ldquo;tutorial&rdquo; part.
I have found practical information in nearly each of these.</p>

<p>The <em>&ldquo;There&rsquo;s more&rdquo;</em> parts are cools because it shows additionnal/alternate/better ways to think about what you read before.
For example, here is an excerpt from this part from the chapter &ldquo;Understanding bytecode enhancement&rdquo;:</p>

<blockquote>
<p><em>Overriding toString() via annotation</em></p>

<p>Peter Hilton has written a very good article on how one can configure the output of the toString() method of an entity with the help of an annotation by using bytecode enhancement. You can check it out at <a href="http://www.lunatech-research.com/archives/2011/01/11/declarative-model-class-enhancement-play">http://www.lunatech-research.com/archives/2011/01/11/declarative-model-class-enhancement-play</a></p>
</blockquote>

<p>A lot of content is about modules (dependencies, events&hellip;) with some examples (Solr, cache&hellip;).
The idea is to complete what you may find online or in the official documentation.</p>

<h2 id="review">Review</h2>

<p>I give a &ldquo;B&rdquo; to the book, as it is 1) easy to read and well written, 2) entertaining, 3) actionnable.
The author, Alexander Reelsen, has done a very good work.</p>

<p>I learnt a lot, even as a beginner on the framework. Many of my questions were answered.
The main benefit of the book is to complete the online documentation and going further on many topics.
I really liked the given explanations, the additionnal references and that the framework&rsquo;s code was referenced (in the form: &ldquo;See this class for more info&rdquo;).</p>

<p>What&rsquo;s missing ? Maybe a Scala chapter, but as the author wrote:
&ldquo;When I started writing this book, my Scala knowledge was far from competitive (and still is in many areas)&rdquo;.</p>

<h2 id="links">Links</h2>

<ul>
<li><a href="http://www.amazon.fr/gp/product/1849515522?ie=UTF8&amp;tag=tosqu-21">Book (Amazon)</a></li>
<li><a href="http://www.packtpub.com/play-framework-cookbook/book">Book (Packt Publishing)</a></li>
<li><a href="http://www.lunatech-research.com/archives/2011/09/19/playframework-cookbook-review">Additional review from Lunartech-research</a></li>
</ul>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Better autocompletes with Fuzzy Matching]]></title>
            <link href="http://www.tomsquest.com/blog/2011/05/better-autocompletes-with-fuzzy-matching/"/>
            <id>http://www.tomsquest.com/blog/2011/05/better-autocompletes-with-fuzzy-matching/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2011-05-13T00:00:00+00:00</published>
            <updated>2011-05-13T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>This article is an introduction to Fuzzy Matching and how it can improve an Autocomplete widget. Fuzzy Matching is used to find the most appropriate strings into a set of strings, like finding &ldquo;Sinatra&rdquo; when you mispelled it &ldquo;Senatra&rdquo;.</p>

<p>We will setup a Sinatra application displaying an Ajax autocomplete widget, which call the backend to have the best matching results, even if the match is not strictly equal.</p>

<h2 id="fuzzy-matching">Fuzzy Matching ?</h2>

<p>Fuzzy Matching, aka <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Approximate_string_matching">Approximate String matching</a> on Wikipedia, is used mainly in spell checkers and in biology to measure the variation between DNA.</p>

<p>In this article, we will use the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Levenshtein_distance">Levenshtein distance algorithm</a> to fetch results when there would be none using standard methods. Some other matching algorithms are also popular: the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Damerau%E2%80%93Levenshtein_distance">Damerau–Levenshtein distance</a> (Levenshtein with transposition of letters), the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Soundex">Soundex</a> (a phonetic algorithm for indexing names by sound) and also the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Bitap_algorithm">Bitap</a>. Many of them can be found in Ruby, or could also be hand coded.</p>

<p>Using the Levenshtein algorithm, we get a distance between two strings. This gives for example :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#960050;background-color:#1e0010">$</span> distance(<span style="color:#e6db74">&#34;sinatra&#34;</span>, <span style="color:#e6db74">&#34;sinatra&#34;</span>) <span style="color:#75715e">#= 0, equality</span>
<span style="color:#960050;background-color:#1e0010">$</span> distance(<span style="color:#e6db74">&#34;sinatra&#34;</span>, <span style="color:#e6db74">&#34;senatra&#34;</span>) <span style="color:#75715e">#= 1, one permutation</span>
<span style="color:#960050;background-color:#1e0010">$</span> distance(<span style="color:#e6db74">&#34;sinatra&#34;</span>, <span style="color:#e6db74">&#34;rails&#34;</span>) <span style="color:#75715e">#= 6, many permutation</span></code></pre></div>
<p>This allows us to display to the user not only the strings that match the input, but also the strings that are approximately equal.</p>

<h2 id="the-application">The application</h2>

<p>The application uses the following pieces of code :</p>

<ul>
<li>A Sinatra application</li>
<li>JQuery UI for the Autocomplete</li>
<li>The &ldquo;text&rdquo; gem which has an implementation of the Levenshtein distance algorithm (source: <a href="https://github.com/threedaymonk/text/blob/master/lib/text/levenshtein.rb">https://github.com/threedaymonk/text/blob/master/lib/text/levenshtein.rb</a>)</li>
</ul>

<p>The source code is available on : <a href="https://github.com/tomsquest/better-autocompletes-with-fuzzy-matching">https://github.com/tomsquest/better-autocompletes-with-fuzzy-matching</a></p>

<h3 id="frontend">Frontend</h3>

<p>The JQuery Autocomplete widget is simple to setup. The source is defined to call the &ldquo;countries&rdquo; URL and it will send it the input like &ldquo;countries?term=my_input&rdquo;.</p>

<h4 id="1-add-an-input">1. Add an input</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui-widget&#34;</span>&gt;
 &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;country&#34;</span>&gt;Country:&lt;/<span style="color:#f92672">label</span>&gt;
 &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;country&#34;</span> /&gt;
&lt;/<span style="color:#f92672">div</span>&gt;</code></pre></div>
<h4 id="2-bind-the-js">2. Bind the JS</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#country&#34;</span>).<span style="color:#a6e22e">autocomplete</span>({
    <span style="color:#a6e22e">source</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;countries&#34;</span>,
    <span style="color:#a6e22e">select</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>( <span style="color:#a6e22e">event</span>, <span style="color:#a6e22e">ui</span> ) {
      <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#results&#34;</span>).<span style="color:#a6e22e">text</span>(<span style="color:#e6db74">&#34;input was: &#39;&#34;</span><span style="color:#f92672">+</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39; and selection was: &#34;</span><span style="color:#f92672">+</span> <span style="color:#a6e22e">ui</span>.<span style="color:#a6e22e">item</span>.<span style="color:#a6e22e">value</span>);
    }
  });
});
</code></pre></div>
<h3 id="backend">Backend</h3>

<p>Even simpler, the backend is a simple get method which respond with JSON :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">get <span style="color:#e6db74">&#34;/countries&#34;</span> <span style="color:#66d9ef">do</span>
 content_type <span style="color:#e6db74">:json</span>
 find_countries(params<span style="color:#f92672">[</span><span style="color:#e6db74">:term</span><span style="color:#f92672">]</span>)<span style="color:#f92672">.</span>to_json
<span style="color:#66d9ef">end</span></code></pre></div>
<p>The real stuff is in the &ldquo;find_countries&rdquo; method :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">find_countries</span>(term)
  <span style="color:#75715e"># Exact match</span>
  countries <span style="color:#f92672">=</span> <span style="color:#66d9ef">COUNTRIES</span><span style="color:#f92672">.</span>find{<span style="color:#f92672">|</span>c<span style="color:#f92672">|</span> c<span style="color:#f92672">.</span>downcase <span style="color:#f92672">==</span> term<span style="color:#f92672">.</span>downcase}<span style="color:#f92672">.</span>to_a

  <span style="color:#75715e"># Partial match</span>
  <span style="color:#66d9ef">if</span> countries<span style="color:#f92672">.</span>empty?
    countries <span style="color:#f92672">=</span> <span style="color:#66d9ef">COUNTRIES</span><span style="color:#f92672">.</span>find_all{<span style="color:#f92672">|</span>c<span style="color:#f92672">|</span> c<span style="color:#f92672">.</span>downcase<span style="color:#f92672">.</span>include? term<span style="color:#f92672">.</span>downcase }

    <span style="color:#75715e"># Here is where we call the distance method of the text gem. It computes the Levenshtein distance and</span>
    <span style="color:#75715e"># appends the results to the partial match done before</span>
    max_distance <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span> <span style="color:#75715e"># Should be tweaked</span>
    countries <span style="color:#f92672">+=</span> <span style="color:#66d9ef">COUNTRIES</span><span style="color:#f92672">.</span>find_all{<span style="color:#f92672">|</span>c<span style="color:#f92672">|</span> distance(c, term) <span style="color:#f92672">&lt;</span> max_distance}<span style="color:#f92672">.</span>sort_by{<span style="color:#f92672">|</span>c<span style="color:#f92672">|</span> distance(c, term) }

    countries<span style="color:#f92672">.</span>uniq!
  <span style="color:#66d9ef">end</span>

  countries
<span style="color:#66d9ef">end</span></code></pre></div>
<p>The find_countries method can serve as an example. It uses exact and partial matching and use the Levenshtein distance to add some more results. A real-world-awesome-production implementation would be different, by narrowing the results (less results, lower distance).</p>

<h2 id="wrapping-up">Wrapping up</h2>

<p>With a minimal mathematical background and a minimal technical setup (no indexing, no DB specific feature), we have boosted our autocomplete results.</p>

<p>We&rsquo;ve seen how to setup a quick-and-simple sinatra app which computes on the Levenshtein distance on the backend. The Frontend was easily done using the JQuery UI Autocomplete widget.</p>

<p>For advanced use cases, we should improve the way we mix the Fuzzy-maching results with the strictly matching results. Switching to a better algorithm, or a set of algorithm (Longest common substring + Dameau-Levenshtein) could also be easily done.</p>

<p>`The complete source code is available on Github : <a href="https://github.com/tomsquest/better-autocompletes-with-fuzzy-matching">https://github.com/tomsquest/better-autocompletes-with-fuzzy-matching</a></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[FitNesse technical setup]]></title>
            <link href="http://www.tomsquest.com/blog/2010/12/fitnesse-technical-setup/"/>
            <id>http://www.tomsquest.com/blog/2010/12/fitnesse-technical-setup/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2010-12-04T00:00:00+00:00</published>
            <updated>2010-12-04T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>Getting <a href="http://fitnesse.org">FitNesse</a> working for a development team is not particularly evident. You have many possibilities and some of them are not so effective.</p>

<p>The Setup proposed here has a good combination of pros and cons. It will enable the work of two teams: one team of functional people using a central server and one team of developers writing the fixture straight from their workspace.</p>

<h2 id="advantages-and-disadvantages">Advantages and disadvantages</h2>

<p>Pros:</p>

<ul>
<li>Developer friendly</li>
<li>One unique source of test cases: the central server</li>
<li>Test pages backup along the source code</li>
</ul>

<p>Cons:</p>

<ul>
<li>Pages cannot be created locally; they have to be created on the central server</li>
<li>The backup task seems hacky, but it does the job</li>
</ul>

<h2 id="team-process">Team process</h2>

<p>The functional people use the central server to manage the test pages</p>

<p>Each developer has its own FitNesse server, which imports the page from the central server and use the local workspace</p>

<p>A job adds, delete and commits the changes made on the central server’s pages</p>

<p>Basic rules:</p>

<ul>
<li>Pages must be created on the central server, never locally</li>
<li>Pages must be modified remotely (using the “Edit Remotely” button); Local pages may be erased at the next sync, so use them carefully</li>
</ul>

<p><img src="/img/posts/fitnesse-schema_resized2.jpg" alt="" /></p>

<h2 id="setup">Setup</h2>

<h3 id="1-central-server">1. Central Server</h3>

<h4 id="launcher">Launcher</h4>

<p>The launcher will use a local checkout of the project. This checkout is used for compiling the fixture and project code, and also to be able to commit the changes made to the test pages.</p>

<p>Launcher command line:</p>

<pre><code>java -jar fitnesse.jar -p 8086 -e 0 -r $dir_with_fitnesse_pages
</code></pre>

<p>The “-e 0” argument disables the built-in versioning system of FitNesse.</p>

<p>The “-r $dir” argument tells FitNesse to use this directory as the repository of pages.</p>

<p>The whole command line arguments are described here: <a href="http://fitnesse.org/FitNesse.UserGuide.CommandLineArguments">http://fitnesse.org/FitNesse.UserGuide.CommandLineArguments</a></p>

<h4 id="classpath">Classpath</h4>

<p>We use the “root” page (<a href="http://localhost:8086/root">http://localhost:8086/root</a>) to declare the server’s configuration and classpath.</p>

<p>This page won’t be added to source control, because its content will be different on a developer’s workstation.</p>

<p>The <a href="https://github.com/joel1di1/fitnesse-maven-classpath">fitnesse-maven-plugin</a> is used to create the list of jars we depend on. It reads the pom.xml file of our maven project, but it can also read a pom file directly from the central repository.</p>

<p>Content of the root page:</p>

<pre><code>Use Slim engine instead of Fit
!define TEST_SYSTEM {slim}

Change the default port to avoid conflicts
!define SLIM_PORT {62123}

Classpath and pom file
!path /home/hudson/workspace/myproject/fitnesse/target/test-classes
!pomFile /home/hudson/workspace/myproject/fitnesse/pom.xml
</code></pre>

<h4 id="backup-job">Backup job</h4>

<p>The backup job is simple. It is run by our Build server, every minute and launches a basic script, which adds, deletes and commits all changes within a directory.</p>

<p>Here is a simple batch file for Subversion.
The first argument should be the directory to backup.</p>

<pre><code>for /f &quot;tokens=2*&quot; %%i in ('svn status %1 ^| find &quot;?&quot;') do svn add &quot;%%i&quot;
for /f &quot;tokens=2*&quot; %%i in ('svn status %1 ^| find &quot;!&quot;') do svn delete &quot;%%i&quot;
svn commit -m &quot;Automatic commit&quot; %1
</code></pre>

<p>We did try to use a FitNesse plugin for Subversion to backup the pages automatically (and in a less hacky way) but that simply did not work at all. This plugin was: <a href="http://code.google.com/p/cm-subversion">http://code.google.com/p/cm-subversion</a></p>

<p>FitNesse has also a pseudo-native support of Git (see <a href="http://fitnesse.org/FitNesse.UserGuide.SourceCodeControl.GitPlugin">here</a>) but corporate Git repositories are still not the standard.</p>

<h4 id="svn-ignore">SVN ignore</h4>

<p>All files in the working directory of FitNesse can be versioned, except:</p>

<ul>
<li>The “root” page we used earlier, this is the content.txt and properties.xml at the root of the working directory</li>
<li>The “ErrorLogs” directory</li>
<li>All zip files “*.zip” (there should be none because of the “-e 0” flag</li>
</ul>

<p>Source: <a href="http://stackoverflow.com/questions/249580/how-do-i-add-fitnesse-pages-to-version-control">http://stackoverflow.com/questions/249580/how-do-i-add-fitnesse-pages-to-version-control</a></p>

<h3 id="2-developer-server">2. Developer server</h3>

<h4 id="launcher-1">Launcher</h4>

<p>On a developer server, we don’t need the “-r” flag. The pages will be imported from the central server.</p>

<p>Launcher command line:</p>

<pre><code>java -jar fitnesse.jar -p 8086 -e 0
</code></pre>

<h4 id="classpath-1">Classpath</h4>

<p>As on the central server, the “root” page is used to configure the classpath.</p>

<p>The content is the same, with the exception of the local path:</p>

<pre><code>Use Slim engine instead of Fit
!define TEST_SYSTEM {slim}

Change the default port to avoid conflicts
!define SLIM_PORT {62123}

Classpath and pom file
!path /home/tom/dev/myproject/fitnesse/target/test-classes
!pomFile /home/tom/dev/myproject/fitnesse/pom.xml
</code></pre>

<h4 id="wiki-import">Wiki import</h4>

<p>The Wiki Import feature is used to, well&hellip; import the pages from the central server.</p>

<p>How-to:</p>

<ul>
<li>From the developer’s server, create a new page</li>
<li>From the properties, paste the URL to the parent page you wish to import (something like <a href="http://fitnesse:8086/MyProject">http://fitnesse:8086/MyProject</a>)</li>
</ul>

<p><img src="/img/posts/fitnesse_wiki_import.jpg" alt="" /></p>

<h4 id="debugging">Debugging</h4>

<p>Debugging is easy. Add a breakpoint to a fixture then create a “Remote Debug” configuration (within the Debug menu).</p>

<p>Under FitNesse, just append the following at the end of the page you want to debug:</p>

<pre><code>?responder=test&amp;remote_debug=true
</code></pre>

<h4 id="random-problem-bind-socket-exception">Random problem (Bind, Socket exception)</h4>

<p><img src="/img/posts/fitnesse_error.jpg" alt="" /></p>

<p>If you experience strange errors with no output, or better Socket and Bind exceptions (like in the screenshot), you should use the SLIM_PORT option (as used in this article). This basically shift the ports used by Slim to avoid conflicts with, let’s say, Tomcat.</p>

<p>Add this:</p>

<pre><code>!define SLIM_PORT {62123}
</code></pre>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Industrialisation des développements : automatisez votre base de données]]></title>
            <link href="http://www.tomsquest.com/blog/2010/09/industrialisation-des-developpements-automatisez-votre-base-de-donnees/"/>
            <id>http://www.tomsquest.com/blog/2010/09/industrialisation-des-developpements-automatisez-votre-base-de-donnees/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2010-09-16T00:00:00+00:00</published>
            <updated>2010-09-16T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>Le grand oubli dans l&rsquo;industrialisation des développements est la base de données, cette chose monolithique et statique qui n&rsquo;évolue pas aussi vite et aussi aisément que le code. Au même titre que l&rsquo;intégration continue et les systèmes de gestion de version pour le code source, il existe des outils permettant de fluidifier et d&rsquo;automatiser le travail autour du schéma physique des données. Travailler avec ces outils permet de compléter une démarche Agile en permettant une réactivité forte face aux changements.</p>

<p>Une première partie de cet article concernera les principes et pratiques autour de ces outils (partie « boss compliant »). La deuxième est orientée technique (partie « geek aware »).</p>

<h2 id="principes-directeurs">Principes directeurs</h2>

<p>Dans son article paru en 2003 intitulé « <a href="http://martinfowler.com/articles/evodb.html">Evolutionary Database Design</a> », Martin Fowler pose les principes du design évolutif de base de données. Les points clés en sont :</p>

<ul>
<li>La base de données évolue en même temps que le code ;</li>
<li>Il faut donc tester en continu la base de données pour permettre un refactoring sans conséquence, comme on le fait avec le code source ;</li>
<li>Il faut outiller les processus autour de la base de données afin d&rsquo;améliorer la productivité des développements et leur industrialisation.</li>
</ul>

<p>Les outils existants reposent sur les principes suivants :</p>

<ul>
<li>Un schéma doit pouvoir être détruit et recréé de manière répétable ;</li>
<li>La version du schéma doit être identifiable ;</li>
<li>La montée et la descente de version doivent être automatisées ;</li>
<li>Les changements appliqués doivent être connus ;</li>
<li>Un changement doit pouvoir être défait ou annulé ;</li>
<li>Un changement précédemment appliqué ne doit pas être modifié mais un nouveau changement doit être créé.</li>
</ul>

<h2 id="principes-techniques">Principes techniques</h2>

<p>Sur le plan technique, le fonctionnement des outils de migration est simple. Ils se basent sur une table contenant la version de la base de données. La liste des scripts exécutés est conservée ainsi qu’une empreinte de chaque script afin de détecter une altération d’un script déjà exécuté.</p>

<p>A chaque lancement, l’outil de migration compare la version de la base et les scripts existants et propose la mise à jour le cas échéant.</p>

<p>Il est également possible de « descendre de version » le schéma (fonctionnalité disponible dans quasiment tous les outils). Il s’agit de remettre la base de données dans un état cohérent. Deux cas d’usage :</p>

<ul>
<li>développement d’une nouvelle fonctionnalité : il est ainsi possible de créer un script et de l’exécuter plusieurs fois (montée de version, test, modification, descente, puis nouvelle montée de version). La descente de version permet ainsi de faire revenir la base de données dans l’état précédent ;</li>
<li>Ré-alignement automatique du schéma avec le code quand la version de la base de données n’est plus la bonne. Ce cas intervient quand il faut corriger un bug sur la version de production ou au passage à une autre branche de développement, ou encore quand un script a été exécuté puis modifié.</li>
</ul>

<p>Même si la descente de version est utile, elle a néanmoins deux inconvénients. Le premier est que les instructions de descente doivent être écrites à la main. Les outils les plus simples fonctionnent sur le principe où chaque script contient une partie montée de version et une partie descente (voir l’exemple plus bas avec MyBatis). Seul Liquibase est capable de générer les instructions de descente de version grâce à son DSL.</p>

<p>Le deuxième inconvénient est que certaines montées de version ne sont pas réversibles (suppression de table ou de données). Dans ce cas, la descente ne sera possible que jusqu&rsquo;à la version incluant ce type de modification. L&rsquo;alternative est de recréer le schéma de zéro, une fonctionnalité que tous les outils proposent et qui est en fin de compte très rapide.</p>

<h2 id="bonnes-pratiques">Bonnes pratiques</h2>

<p>Les bonnes pratiques poussées par ces outils sont :</p>

<ul>
<li>Scripts (SQL ou XML pour Liquibase) stockés avec le code source</li>
<li>Une base de données par développeur (réaliste quand la gestion de la DB est automatisée, hors problème de coût de licence) ;</li>
<li>Une base de données commune à l’équipe qui représente l’état complet et stable ;</li>
<li>L’intégration continue déroule l’ensemble des scripts à chaque livraison ;</li>
<li>Un script qui a déjà pu être exécuté ne doit plus être modifié. On risque sinon de désynchroniser les scripts et le schéma. La livraison d’un nouveau script est nécessaire dans ce cas. Ce script est un refactoring du précédent. La seule exception est un script buggé qui provoque la perte de la donnée. Il ne faut donc pas que ce script atteigne les autres environnements.</li>
</ul>

<h2 id="les-outils-existants">Les outils existants</h2>

<h3 id="liquibase-puissant-mais-complexe">Liquibase : puissant mais complexe</h3>

<p><a href="http://liquibase.org/">Liquibase</a> est le plus connu des outils de migration de base de données. Il se base sur les patterns décrits dans le livre « Refactoring database ». À ce titre, il est conçu autour d’une approche théorique par pattern de refactoring.</p>

<p>Le noyau de Liquibase est son DSL basé sur XML qui a les avantages :</p>

<ul>
<li>d’être compatible avec plusieurs moteurs SQL ;</li>
<li>de donner une sémantique aux opérations (on écrira un &lt;renameColumn&gt; plutôt qu’un alter table) ;</li>
<li>de générer automatique des instructions de rollback (par exemple, un &lt;createColumn&gt; sera compensé par un &lt;dropColumn&gt;).</li>
</ul>

<p>Liquibase est complet. Il s’intègre à Maven, Grails, Spring et Hibernate et supporte la génération de documentation ou encore la création d’un diff entre schémas.</p>

<p>L’inconvénient principal de Liquibase est une certaine complexité qui ne se retrouve pas dans les autres outils (XML, notion de changelog et de changeset, versionning sur id/auteur/chemin). La courbe d&rsquo;apprentissage est donc plus élevée que les autres outils se basant purement sur du SQL.</p>

<p>Exemple de changeSet Liquibase :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;changeSet</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">author=</span><span style="color:#e6db74">&#34;bob&#34;</span><span style="color:#f92672">&gt;</span>
 <span style="color:#f92672">&lt;createTable</span> <span style="color:#a6e22e">tableName=</span><span style="color:#e6db74">&#34;department&#34;</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;column</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;id&#34;</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;int&#34;</span><span style="color:#f92672">&gt;</span>
   <span style="color:#f92672">&lt;constraints</span> <span style="color:#a6e22e">primaryKey=</span><span style="color:#e6db74">&#34;true&#34;</span> <span style="color:#a6e22e">nullable=</span><span style="color:#e6db74">&#34;false&#34;</span><span style="color:#f92672">/&gt;</span>
  <span style="color:#f92672">&lt;/column&gt;</span>
  <span style="color:#f92672">&lt;column</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;name&#34;</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;varchar(50)&#34;</span><span style="color:#f92672">/&gt;</span>
 <span style="color:#f92672">&lt;/createTable&gt;</span>
<span style="color:#f92672">&lt;/changeSet&gt;</span></code></pre></div>
<h3 id="les-pragmatiques">Les pragmatiques</h3>

<p>D’autres outils ne vont pas aussi loin que Liquibase en termes de fonctionnalités et d&rsquo;abstraction mais leur approche est pragmatique et plus simple. Ils visent avant tout à automatiser la gestion des scripts SQL. Les principaux sont <a href="http://www.mybatis.org/java.html">MyBatis Schema Migration</a>, <a href="http://dbmaintain.sourceforge.net/">DbMaintain</a> et <a href="http://code.google.com/p/c5-db-migration/">C5 DB Migration</a>.</p>

<p>Le principe de ces outils est assez simple et consiste à lancer une série de scripts stockés dans une arborescence répartie en version. Les actions sont tracées ce qui permet de connaître l’état du schéma.</p>

<p>Exemple d’arborescence organisée pour DbMaintain :</p>

<pre><code>scripts/01_v1.0/01_products_and_orders.sql
                02_users.sql
        02_v1.1/01_add_barcode_column.sql
                02_drop_itemcode_column.sql
</code></pre>

<p>Le schéma de base de données est mis à jour en exécutant :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dbmaintain.sh update chemin/vers/les/scripts</code></pre></div>
<p>Dans le cas de MyBatis, les instructions de montée et de descente de version sont écrites dans le même script SQL.
Exemple :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#75715e">--// create product table
</span><span style="color:#75715e"></span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> PRODUCT (ID INT, NAME VARCHAR(<span style="color:#ae81ff">255</span>));

<span style="color:#75715e">--//@UNDO
</span><span style="color:#75715e"></span><span style="color:#66d9ef">DROP</span> <span style="color:#66d9ef">TABLE</span> PRODUCT;</code></pre></div>
<h2 id="conclusion">Conclusion</h2>

<p>Les outils de migration de base de données permettent une meilleure productivité en levant certaines barrières au changement du schéma des données et ils rendent l&rsquo;industrialisation accessible.</p>

<p>Les points clés à retenir sont :</p>

<ul>
<li>Les outils de migration de bases de données nous permettent de gagner en efficacité lors de la manipulation du schéma de la base de données ;</li>
<li>Ces outils fiabilisent les traitements en les automatisant et en les intégrants à l’usine de développement ;</li>
<li>Ces outils apportent de bonnes pratiques permettant un travail en équipe plus efficace ;</li>
<li>Ces outils sont disponibles, simples à mettre en place et OpenSource.</li>
</ul>

<p>Par extension, on peut imaginer qu&rsquo;une application puisse se mettre à jour d&rsquo;elle-même. En effet, il s’agirait de permettre à l’application de lancer les migrations de schémas quand elle démarre. Cette fonctionnalité réduit le temps de mise en production en supprimant l’étape de passage des scripts par les DBA. Liquibase propose déjà cette fonctionnalité.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Notes sur Rework de 37signals]]></title>
            <link href="http://www.tomsquest.com/blog/2010/08/notes-sur-rework-de-37signals/"/>
            <id>http://www.tomsquest.com/blog/2010/08/notes-sur-rework-de-37signals/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2010-08-29T00:00:00+00:00</published>
            <updated>2010-08-29T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/rework_cover.jpg" style="float:right"/></p>

<p>Mes notes sur le deuxième livre de la société 37signals, <a href="http://37signals.com/rework/">Rework</a>. Il fait suite à Getting Real. J&rsquo;ai avalé rapidement le livre car les idées sont tranchantes, inspirantes et quelque fois révoltantes. Mais le but est là : réaliser qu&rsquo;il y a d&rsquo;autres façons de faire du business. de concevoir son entreprise et de travailler.</p>

<p>Oui, il est possible de concevoir des applications avec moins de fonctionnalités que la concurrence. Non, l&rsquo;argent des investisseurs n&rsquo;est pas toujours bon à prendre.</p>

<p>Le livre est composé d&rsquo;un ensemble de courts chapitres et décrit les recettes qu’applique 37Signals pour ces produits et sa façon d’être en tant que business.</p>

<h2 id="learning-form-mistakes-is-overrated">Learning form mistakes is overrated</h2>

<p>Apprendre de ses erreurs est surévalué, il vaut mieux apprendre de ses succès. L&rsquo;échec n&rsquo;est pas un pré requis du succès. Quelqu&rsquo;un qui a déjà eu un succès a plus de chance de l&rsquo;être à nouveau. Ceux qui ont eu un échec n&rsquo;ont pas plus de chance d&rsquo;avoir un succès que les nouveau.</p>

<p>Voir <a href="http://www.nytimes.com/2009/03/22/business/22proto.html">l&rsquo;article de Leslie Berlin &ldquo;Try, try again, or maybe not&rdquo;</a> qui montre que l&rsquo;échec ne garantit pas le succès mais que le succès participe au succès.</p>

<h2 id="why-grow">Why Grow ?</h2>

<p>Une entreprise avec beaucoup d’employé n’est pas forcément saine. Avec la taille viennent de nouveaux problèmes et une plus grande complexité. Chacun doit trouver la bonne taille pour son business en commençant petit et en voyant comment il grandit.</p>

<h2 id="start-making-something">Start making something</h2>

<p>Une idée ne vaut rien tant que vous n&rsquo;en avez rien fait. La vraie question est de quelle bonne façon on la réalise.</p>

<h2 id="no-time-is-no-excuse">No time is no excuse</h2>

<p>Il est toujours possible de prendre quelques heures dans son planning pour travailler sur nos projets. Pas de temps, n&rsquo;est pas une excuse !</p>

<h2 id="outside-money-is-plan-z">Outside Money is plan Z</h2>

<p>Prendre l’argent d’investisseurs peut ne pas en valoir le coût, car :</p>

<ul>
<li>il fait perdre une partie du contrôle : devoir prendre en compte les ordres d&rsquo;autres personnes par exemple ;</li>
<li>il occasionne une baisse de qualité au détriment du retour sur investissement rapide ;</li>
<li>Dépenser l&rsquo;argent des autres est addictif ;</li>
<li>C&rsquo;est souvent un mauvais coup financier (au début, on n&rsquo;a aucun levier pour gérer mieux le deal) ;</li>
<li>Le client ne devient plus le premier objectif, mais les objectifs des investisseurs le deviennent ;</li>
<li>Obtenir de l&rsquo;argent prend beaucoup d&rsquo;énergie et de temps.</li>
</ul>

<h2 id="start-a-business-not-a-startup">Start a business, not a startup</h2>

<p>Le mot Startup signifie être dispendieux, ne pas affronter les réalités du marché, être dans une bulle. Or la réalité est là. Mieux vaut créer un business qu’une Startup.</p>

<h2 id="embrace-constraint">Embrace constraint</h2>

<p>Moins (de temps, d&rsquo;argent, de personne, d&rsquo;expérience) est une vraie bonne chose. Cela force à être créatif et à éviter le gâchis.</p>

<h2 id="illusions-of-agreement">Illusions of agreement</h2>

<p>Essayer de supprimer les niveaux d&rsquo;abstractions (docs, plans, rapports). Chacun peut imaginer une chose différente de chaque niveau. Seul le résultat (le produit) met tout le monde d&rsquo;accord.</p>

<h2 id="reasons-to-quit">Reasons to quit</h2>

<p>Questions à se poser pour s&rsquo;assurer que l&rsquo;on travaille sur des choses qui importent :</p>

<ul>
<li>Pourquoi faites-vous cela ? A qui cela bénéficie, quelle est la motivation&hellip;</li>
<li>Quel problème résolvez-vous ?</li>
<li>Est-ce utile finalement ? Faire quelque chose ou quelque chose d&rsquo;utile ?</li>
<li>Ajoutez vous de la valeur ?</li>
<li>Est-ce que cela changera quelque chose ?</li>
<li>Que pourriez-vous faire à la place ? Priorité…</li>
</ul>

<p>Ne pas hésiter à abandonner ce que l&rsquo;on est en train de faire. Des fois, c&rsquo;est la bonne chose à faire.</p>

<h2 id="make-tiny-decisions">Make tiny decisions</h2>

<p>Mieux vaut faire un ensemble de petites décisions qu&rsquo;une grosse décision. Grosse décision égale de grosses erreurs. Cela n&rsquo;est pas vrai pour de petites décisions qui seront réparables. Cela n&rsquo;empêche pas d&rsquo;avoir de grosses idées et de grands plans, juste que la meilleure façon de les réaliser, c&rsquo;est par petite décision.</p>

<p>Les meilleurs buts sont ceux que l&rsquo;on peut atteindre, puisqu&rsquo;une fois réalisés, on peut construire dessus.</p>

<h2 id="underdo-your-competition">Underdo your competition</h2>

<p>Pour battre un compétiteur, pas besoin de faire plus. Viser à moins faire que ses concurrents, mais faire mieux. [Philosophie à la base des produits de 37Signals]</p>

<h2 id="emulate-chefs">Emulate Chefs</h2>

<p>Apprendre aux autres ce que l&rsquo;on connait de son business, ne veut pas dire que les autres pourront nous copier plus facilement (image des chefs cuistot qui donnent leur recette).</p>

<h2 id="drug-dealers-get-it-right">Drug dealers get it right</h2>

<p>Pouvoir faire essayer un produit (une dose) car s’il est bon les clients reviendront pour se le payer.</p>

<h2 id="résumés-are-ridiculous">Résumés are ridiculous</h2>

<p>Un CV est toujours exagéré mais aussi toujours vague. Embauchez sur la base du CV est dangereux. Une lettre de motivation est déjà mieux car il n&rsquo;est pas possible que le candidat ait envoyé une lettre personnalisée à 100 entreprises.</p>

<h2 id="years-of-irrelevance">Years of irrelevance</h2>

<p>Les années d&rsquo;expérience ne veulent pas dire grand chose. Connaitre combien de temps une personne a fait une chose ne vaut pas savoir avec quelle qualité et comment elle l&rsquo;a fait.</p>

<h2 id="hire-great-writers">Hire great writers</h2>

<p>Le talent pour l&rsquo;écriture est un critère de choix entre candidats. Savoir bien écrire signifie savoir penser correctement, communiquer et savoir expliquer.</p>

<h2 id="take-a-deep-breath">Take a deep breath</h2>

<p>Les gens sont des créatures ave des habitudes, c&rsquo;est pour cela que le changement est souvent vu comme négatif. Une réaction négative est presque toujours plus forte et plus passionnée qu&rsquo;une réaction positive.</p>

<p>Quand on réalise en changement, il y aura toujours de mécontents. Il faut les écouter, attendre un peu, montrer que l&rsquo;on est conscient du problème. Souvent les gens s&rsquo;adapteront.</p>

<h2 id="decisions-are-temporary">Decisions are temporary</h2>

<p>Une décision n&rsquo;est pas définitive. Il faut se laisser la possibilité d&rsquo;y revenir. Décider pour maintenant et s&rsquo;inquiéter pour le futur plus tard.</p>

<h2 id="liens-annexes">Liens annexes</h2>

<ul>
<li>Le site du livre : <a href="http://37signals.com/rework/">http://37signals.com/rework/</a></li>
<li>Les notes d&rsquo;<a href="http://ulrichinaction.blogspot.com">Ulrich Vachon</a> sur le livre : <a href="http://ulrichinaction.blogspot.com/2010/08/retour-sur-rework.html">http://ulrichinaction.blogspot.com/2010/08/retour-sur-rework.html</a></li>
</ul>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Construire la nouvelle génération de leaders techniques]]></title>
            <link href="http://www.tomsquest.com/blog/2010/08/construire-la-nouvelle-generation-de-leaders-techniques/"/>
            <id>http://www.tomsquest.com/blog/2010/08/construire-la-nouvelle-generation-de-leaders-techniques/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2010-08-24T00:00:00+00:00</published>
            <updated>2010-08-24T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>Transcription de la session de Patrick KUA à l&rsquo;USI 2010 : <a href="http://www.universite-du-si.com/en/conferences/6-paris-usi-2010/sessions/912-construire-la-nouvelle-generation-de-leaders-techniques">Building the next génération of technical leaders</a>.</p>

<h2 id="définition">Définition</h2>

<p>Un leader technique est un développeur qui passe 30% de son temps à coder avec l’équipe et 70% en activités de leader. Il a donc deux types de compétences : le développement et le leadership.</p>

<p>Un leader technique ne doit pas être déconnecté de ce qu’il prône, sinon il risque de se baser sur ses opinions plutôt que sur des faits.</p>

<p>Un leader est facteur important pour la réussite d’une équipe.</p>

<h2 id="de-mauvais-leaders-techniques">De mauvais Leaders Techniques</h2>

<p>Différents types de mauvais leader technique :</p>

<ul>
<li>&ldquo;Benevolent Dictator&rdquo; : il dicte ce qu’il fait en étant soutenu par ses opinions plutôt que par du concret</li>
<li>&ldquo;Do it yourself&rdquo; : ne sait pas déléguer</li>
<li>&ldquo;Hard Problems are mine&rdquo; : ne prends que les sujets difficiles (intéressants)</li>
</ul>

<p>Il existe des développeurs dont la valeur produite est négative (leur impact nette est négative). Il en est de même pour les leaders techniques.  Ceux-ci peuvent provoquer une perte d’enthousiasme de l’équipe, de l’apathie ou encore de la déresponsabilisation.</p>

<h2 id="former-de-bons-leader-techniques">Former de bons leader techniques</h2>

<p>Nos systèmes ne savent pas produire de bons tech leads.  Le principe de Peter est souvent de rigueur. Ce principe stipule que dans une hiérarchie, un employé tend à s’élever jusque son niveau d’incompétence.</p>

<p>Patrick raconte une anecdote sur des chercheurs italiens qui ont démontré qu’une société est plus efficace si elle fait monter en grade les personnes aléatoirement plutôt qu’en se basant sur le mérite.</p>

<p>Un bon développeur ne fera pas forcément un bon leader technique. Les compétences de ces deux métiers ne sont tout simplement pas les mêmes.</p>

<h2 id="des-compétences-différentes">Des compétences différentes</h2>

<p>Compétences du développeur :</p>

<ul>
<li>Implémenter une fonctionnalité</li>
<li>Changer un comportement existant</li>
<li>Ecrire des tests</li>
<li>Coder proprement</li>
<li>Challenger les choses établies</li>
<li>Proposer des solutions annexes</li>
</ul>

<p>Compétence du leader technique :</p>

<ul>
<li>Aligner chacun sur une même vision</li>
<li>Résoudre les conflits</li>
<li>Prendre la responsabilité de la livraison</li>
<li>Raconter une histoire</li>
<li>Faire croitre les talents</li>
<li>Faire en sorte que chacun puisse décider</li>
<li>Créer un environnement d’équipe sain</li>
</ul>

<h2 id="solutions">Solutions</h2>

<p>Pour avoir de meilleurs leaders techniques, Patrick recommande de :</p>

<ul>
<li>Reconnaître officiellement les différences entre un développeur et un leader technique : expliquer ce qu’est un leader technique, quelles sont les compétences à acquérir ;</li>
<li>Développer les compétences : un apprenti tech lead peut travailler avec un tech lead expert (pairing, one-on-one), donner le droit explicitement à l’apprenti de faire des erreurs et sans conséquence pour lui  (cela maximise sa progression).</li>
</ul>

<h2 id="liens">Liens</h2>

<p><a href="http://www.thekua.com/atwork/">Blog de Patrick KUA</a></p>

<p><a href="http://qconlondon.com/london-2010/file?path=/qcon-london-2010/slides/PatrickKua_BuildingTheNextGenerationOfTechnicalLeaders.pdf">Slides de la présentation faire à la QCon London (PDF)</a></p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[JPA : les illusions sur les NamedQueries]]></title>
            <link href="http://www.tomsquest.com/blog/2010/03/jpa-les-illusions-sur-les-namedqueries/"/>
            <id>http://www.tomsquest.com/blog/2010/03/jpa-les-illusions-sur-les-namedqueries/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2010-03-28T00:00:00+00:00</published>
            <updated>2010-03-28T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p>Un certain nombre d&rsquo;idées reçues existent sur les NamedQueries. On les dit plus performantes car mises en cache, on les dit plus sûres car validées au chargement. Etudions ces points et regardons quels sont les réels avantages des NamedQueries.</p>

<h2 id="rappel-sur-les-namedqueries">Rappel sur les NamedQueries</h2>

<p>Une NamedQuery est une requête nommée. Ce n&rsquo;est pas une nouveauté de la norme JPA car elles existaient dans Hibernate bien avant. Une namedQuery est un moyen de donner un non à une requête JPQL et de la rappeler par ce nom par la suite.</p>

<p>Création :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Entity</span>
<span style="color:#a6e22e">@NamedQuery</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;findAllCustomers&#34;</span><span style="color:#f92672">,</span> query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Select c From Customers c&#34;</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Client</span> <span style="color:#f92672">{</span>
  <span style="color:#f92672">...</span>
<span style="color:#f92672">}</span></code></pre></div>
<p>Utilisation :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> List <span style="color:#a6e22e">findAll</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">return</span> entityManager<span style="color:#f92672">.</span><span style="color:#a6e22e">createNamedQuery</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;findAllCustomers&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">getResultList</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span></code></pre></div>
<h2 id="une-namedquery-est-plus-performante">Une NamedQuery est plus performante</h2>

<p>La rumeur dit qu&rsquo;une NamedQuery est plus performante car elle est mise en cache.</p>

<p>Techniquement, au démarrage, le moteur JPA va compiler la NamedQuery puis la mettre en cache dans le statementCache des Connections. Cela rappelle fortement les PreparedStatement, non ? Or, Hibernate utilise de toute façon des PreparedStatements si le driver Jdbc le permet. Une NamedQuery ne fait donc pas mieux qu&rsquo;une requête dynamique, même s&rsquo;il y a le coût de parsing de la requête si celle-ci est dynamique.</p>

<p>Je n&rsquo;ai pas trouvé de benchmark entre les deux approches (NamedQuery versus requête dynamique). La principale variable en jeu est le driver Jdbc et donc la base de données utilisée.</p>

<h2 id="une-namedquery-est-validée">Une NamedQuery est validée</h2>

<p>Une NamedQuery est validée au lancement de l&rsquo;application avant d&rsquo;être soit placée dans le statementCache. Cela permet théoriquement de contrôler la syntaxe JPQL, que le mapping est correct, que les entités utilisées sont annotées et que les colonnes ont bien un attribut (ou un getter/setter) dans les entités.</p>

<p>Dans les faits, cette phase de validation est très limitée (testée avec Hibernate 3.3 et mysql) :</p>

<ul>
<li>Pour une entité inexistante (&ldquo;From EntiteInexistante&rdquo;), une erreur est remontée</li>
<li>Pour une colonne inexistante (&ldquo;From Client where colonneInexistante is null&rdquo;), aucune erreur n&rsquo;est soulevée</li>
</ul>

<p>Aujourd&rsquo;hui, je ne vois donc pas en quoi cette phase de validation apporte de la valeur. Si la conversion JPQL vers SQL n&rsquo;est pas complète, elle n&rsquo;empêche pas de valider les requêtes sur <a href="http://www.tomsquest.com/blog/2009/10/tests-d-integration-quid-de-la-base-de-donnees/">la base de données cible</a>.</p>

<h2 id="namedquery-alors-pourquoi">NamedQuery, alors pourquoi ?</h2>

<p>Une fois éliminées ces illusions, il ne reste pas grand-chose d&rsquo;attrayant aux NamedQueries. On sait qu&rsquo;elles ne sont pas systématiquement pas plus performantes et que la validation n&rsquo;est pas complète. Il leur reste cependant trois petits avantages :</p>

<ul>
<li>Les NamedQueries sont réutilisables en plusieurs endroits. Ce cas est principalement utile quand l&rsquo;entityManager est injecté dans la couche de service (et donc qu&rsquo;il n&rsquo;y a pas de couche de DAO) ;</li>
<li>Elles sont chargées au démarrage ce qui permet de diminuer la réponse de l&rsquo;application au premier accès, mais c&rsquo;est au détriment du temps de chargement de l&rsquo;application ;</li>
<li>Les requêtes sont regroupées avec le mapping (@Column&hellip;), ce qui permet de faciliter leur écriture.</li>
</ul>

<p>Pour conclure, je pense que les NamedQueries résultent plus d&rsquo;une question de goût et de convention d&rsquo;écriture que d&rsquo;un réel intérêt technique et factuel.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[8 raisons d'aimer Ruby]]></title>
            <link href="http://www.tomsquest.com/blog/2009/11/8-raisons-d-aimer-ruby/"/>
            <id>http://www.tomsquest.com/blog/2009/11/8-raisons-d-aimer-ruby/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2009-11-11T00:00:00+00:00</published>
            <updated>2009-11-11T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/ruby_logo.png" style="float:right"/>
Ruby est un langage qui évolue vite, qui monte fortement et qui est utilisé pour faire de vraies choses (même en prod !). Cet article contient 8 points qui font de Ruby un très bon langage et une plateforme de choix pour réaliser ses futurs projets.</p>

<h2 id="plus-productif">Plus productif</h2>

<p>Martin Fowler a fait une synthèse de l’utilisation de Ruby chez ThoughtWorks.</p>

<p>La conclusion est une impression très forte d’une meilleure productivité. La majorité des projets ont ressenti un doublement de leur productivité (une impression car la productivité n’est pas mesurable).</p>

<p>Je vous encourage à lire l’article sur le site de Martin Fowler : &ldquo;<a href="http://martinfowler.com/articles/rubyAtThoughtWorks.html">Ruby at ThoughtWorks</a>&ldquo;</p>

<h2 id="meta-programming">Meta-Programming</h2>

<p>Le meta-programming c’est la génération de code par le code. Cela permet par exemple d’écrire des DSL et de simplifier son code. C’est aussi une arme puissante à utiliser modérément.</p>

<p>L’équivalent de la génération d’une méthode au Runtime en Java serait la possibilité d&rsquo;écrire le code suivant :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">genereUneMethode</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">/* cette méthode sera ajouté à la classe appelante */</span>
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">nouvelleMethode</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#75715e">// Les commentaires de Chuck Norris sont compilés
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span></code></pre></div>
<h2 id="duck-typing">Duck Typing</h2>

<p>Le static typing s’oppose au duck typing. En Ruby, il n’y a pas de notion de type vérifié à la compilation.</p>

<p>Cela veut dire, qu’il est possible d’appeler une méthode avec un Array à la place d’une String. Tant que l’autre objet répond aux méthodes de l’objet attendu, le code est valide.</p>

<p>Le Duck Typing permet d’avoir du code beaucoup plus souple. La forte orientation vers les tests de Ruby en est la conséquence.</p>

<p>Il y a eu beaucoup de débats sur au sujet de « Static typing » contre « Duck typing ». Les auteurs de « Programming Ruby 1.9 » expliquent que le typage statique ne rend pas forcément un code plus fiable et peut diminuer la productivité. (Non, pas de Troll)</p>

<p>Plus d’info sur le <a href="http://en.wikipedia.org/wiki/Duck_typing">duck typing sur Wikipedia</a>.</p>

<h2 id="closures">Closures</h2>

<p>Les Closures ont fortement animé les débats autour de leur inclusion (ou pas) dans Java.</p>

<p>Elles font partie de la syntaxe de base de Ruby.</p>

<p>Les Closures sont des méthodes dont l’exécution peut être retardée tout en retenant le contexte quand elles ont été créées. Elles ont plein d’usages mais ne sont pas pourtant pas évidentes à appréhender.</p>

<h2 id="jruby">JRuby</h2>

<p><a href="http://jruby.org">JRuby</a> est une implémentation de Ruby pour la JVM. Avantages : un super garbage collector (merci Java), des threads efficaces, multi-plateformes… Il fait tourner des projets Rails sans problème.</p>

<p>L’avantage est également de pouvoir faire du Ruby sur nos serveurs d’app Java, comme Glassfish 3 qui supporte JRuby.</p>

<h2 id="frameworks-novateurs">Frameworks novateurs</h2>

<p>Rails, Capistrano ou encore Cucumber sont les fers de lance de Ruby et montrent ce que le langage permet de construire.</p>

<ul>
<li><a href="http://rubyonrails.org/">Rails</a> : c’est le Framework Web qui a donné de la visibilité à Ruby. Rails permet de produire des sites Web très rapidement et de manière simple</li>
<li><a href="http://www.capify.org/">Capistrano</a> simplifie fortement le déploiement de projets Ruby et permet par exemple de se brancher sur un SVN pour faire de la mise en production en continue</li>
<li><a href="http://cukes.info/">Cucumber</a> est un framework de BDD simple à prendre en main. Le Meta-Programming apporte beaucoup aux frameworks de tests en permettant l’écriture de DSL de tests</li>
</ul>

<h2 id="gem-le-packaging-facile">GEM : le packaging facile</h2>

<p>Les <a href="http://www.rubyfrance.org/documentations/rubygem---introduction/">GEM</a> sont des archives de projet Ruby. Un peu comme nos JAR/WAR/EAR mais en mieux. Une Gem permet de packager son code, ses tests et ses scripts selon un format normé.</p>

<p>On installe une Gem en ligne de commande, idem pour la mettre à jour ou en rechercher d’autres.</p>

<p>Il est également très simple de pousser une Gem sur les repos (voir par exemple l’impressionnant de simplicité <a href="http://gemcutter.org/">Gemcutter</a>)</p>

<h2 id="une-communauté-riche-et-aussi-en-france">Une communauté riche (et aussi en France)</h2>

<p>Ruby bouge beaucoup et sa communauté est importante. Comme avec Java, il y a des sites de news, des podcasts, des screencasts&hellip;</p>

<ul>
<li>Des news : <a href="http://www.rubyinside.com/">RubyInside</a>, <a href="http://ruby.about.com/">About Ruby</a></li>
<li>Des podcasts : <a href="http://railsenvy.com/">RailsEnvy</a></li>
<li>Des screencasts : <a href="http://www.learnivore.com">Learnivore</a></li>
<li>Des challenges de programmation : <a href="http://rubylearning.com/blog/">RubyLearning </a></li>
</ul>

<p>Les <a href="http://www.rubyfrance.org/">Apéros Ruby</a> ressemblent à nos JUGs. Le prochain a lieu ce jeudi 12. Ils sont moins cadrés que les JUGs mais tout aussi intéressants : Coding Dojo, Lightning talk…</p>

<h2 id="conclusion">Conclusion</h2>

<p>Ruby dispose de nombreux atouts pour plaire, même face à ses concurrents dynamiques ou statiques (Scala par exemple).</p>

<p>Une des principales qualités de Ruby est sa communauté vivante et innovante. Découvrir une plateforme comme Ruby donne un nouvel élan et permet de faire fonctionner ses neurones sur d’autres paradigmes.</p>

<p>J’ai choisi Ruby pour toutes ces bonnes raisons et il y en a encore bien d’autres à découvrir.</p>
]]></content>
        </entry>
    
        <entry>
            <title type="html"><![CDATA[Tests d'intégration : quid de la base de données ?]]></title>
            <link href="http://www.tomsquest.com/blog/2009/10/tests-d-integration-quid-de-la-base-de-donnees/"/>
            <id>http://www.tomsquest.com/blog/2009/10/tests-d-integration-quid-de-la-base-de-donnees/</id>
            <author>
                <name>Thomas Queste</name>
            </author>
            <published>2009-10-12T00:00:00+00:00</published>
            <updated>2009-10-12T00:00:00+00:00</updated>
            <content type="html"><![CDATA[

<p><img src="/img/posts/serveur.jpg" style="float:right"/></p>

<p>La base de données est un élément important des tests d&rsquo;intégration. Les deux questions à se poser sont :</p>

<ul>
<li>Puis-je utiliser une base de données embarquée ?</li>
<li>Puis-je désactiver les contraintes d&rsquo;intégrité ?</li>
</ul>

<h2 id="base-de-données-embarquée-ou-non">Base de données embarquée ou non ?</h2>

<p>C&rsquo;est Rod Johnson qui en parlait sur InfoQ : &ldquo;<a href="http://www.infoq.com/presentations/system-integration-testing-with-spring">System Integration Testing using Spring</a>&rdquo; : une base de données embarquée est inutile dans la plupart des cas.</p>

<p>L&rsquo;argument majeur en faveur d&rsquo;une base embarquée est le travail en mode déconnecté. Dans une équipe disséminée (télétravail, multiples bureaux, déplacement fréquent), ce type de base fait l&rsquo;affaire.</p>

<p>Mais il y a certains inconvénients importants :</p>

<ul>
<li>Moteur SQL différent de la cible : il est possible de certaines requêtes s&rsquo;exécutent sur la base embarquée mais pas sur le type de base utilisée en Prod (différences d&rsquo;implémentation SQL par exemple, expérience vécue avec SQL Server) ;</li>
<li>Debugage difficile : si la base meurt à la fin des tests, il devient difficile d&rsquo;étudier les opérations faites et d&rsquo;étudier pourquoi une requête ne fonctionne pas.</li>
</ul>

<p>Je vois peu d&rsquo;intérêt aujourd&rsquo;hui à utiliser une base de données embarquées si c&rsquo;est pour se rendre compte qu&rsquo;on ne valide pas un comportement similaire à celui de production. Créer une base par développeur sur Oracle ou autre, n&rsquo;est pas si difficile.</p>

<p>Un inconvénient d&rsquo;une base standard est qu&rsquo;elle nécessite d&rsquo;être maintenue (passage des scripts), mais cela est automatisable grâce à des outils comme DBMaintain ou LiquiBase.</p>

<h2 id="contraintes-d-intégrité-actives-ou-non">Contraintes d&rsquo;intégrité actives ou non ?</h2>

<p>Filip Neven, le créateur d&rsquo;Unitils et de DbMaintain, pointe le problème sur son blog (traduction libre) :</p>

<blockquote>
<p>Les gens pensent que la désactivation des contraintes produit une sérieuse dévaluation des tests, car le code qui a été validé avec succès par les tests unitaires pourrait ne pas fonctionner avec une base de données normales - <a href="http://filipneven.blogspot.com/2008/02/disable-constraints-on-your-test.html">Filip Neven</a>
La chose à retenir est : &ldquo;il faut limiter au maximum les données de test&rdquo;.</p>
</blockquote>

<p>Autrement dit : le moins de données de test il y a, le plus maintenable sont les tests.</p>

<p>Filip Neven résume parfaitement la situation :</p>

<ul>
<li>Les tests doivent valider un fonctionnement et non vérifier l&rsquo;intégrité de la base</li>
<li>Les tests unitaires ne sont pas le bon outil pour découvrir des problèmes de contraintes</li>
<li>Dans la plupart des cas, d&rsquo;autres tests, comme les tests fonctionnels, permettront de découvrir les problèmes de contraintes</li>
<li>Désactiver les contraintes est un gain de temps important pour l&rsquo;écriture des tests</li>
</ul>

<p>En effet, les jeux de données ne font généralement que croitre. Une fois qu&rsquo;une donnée est ajoutée à un jeu de tests, il devient laborieux de savoir si cette donnée est utilisée d&rsquo;une manière ou d&rsquo;une autre et donc de la retirer.</p>

<p>En désactivant les contraintes d&rsquo;intégrité, il devient possible que les jeux de données ne contiennent que les données utilisées dans les Where et dans les jointures ; c&rsquo;est-à-dire les données <strong>réellement utiles</strong>. Cette façon de voir les choses simplifie énormément la maintenance des jeux de tests. Finis les fichiers DBUnit.xml qui contiennent 80% de données dues aux colonnes not-null donc inutiles pour le test courant.</p>

<p><a href="http://www.unitils.org/tutorial.html#Automatic_test_database_maintenance">Unitils/DbMaintain</a> propose une méthode rapide pour désactiver ces contraintes (not null et foreign key).</p>

<h2 id="une-fausse-sensation-de-sécurité">Une fausse sensation de sécurité</h2>

<p>Il faut se poser la question : est-ce que l&rsquo;on nuit à la qualité de nos tests si nous touchons à l&rsquo;intégrité de la base de données par la désactivation des contraintes ?</p>

<p>En effet, si les tests passent sur une base qui sera identique à la production (colonnes non nulles, clés étrangères, utilisateur non privilégié), alors nous validons en totalité le fonctionnement cible. Au contraire, si nous avons désactivé les contraintes, alors nous risquons de rencontrer des erreurs plus tard dans la vie du projet, et donc que cela soit plus dur à corriger.</p>

<p>La réponse est double :</p>

<ul>
<li>Oui, nous nous écartons du fonctionnement cible (like &ldquo;Prod&rdquo;) en modifiant le comportement de la base de données ;</li>
<li>Non, ce la ne nuit pas à la qualité des tests.</li>
</ul>

<p>Pourquoi ?</p>

<p>Tester &ldquo;comme en prod&rdquo; donne un <strong>faux sentiment de sécurité</strong>. Les erreurs susceptibles de ne pas être détectée avant la production ne sont pas des problèmes récurrents. Ok, vous allez détecter qu&rsquo;il manque un &ldquo;GRANT select&rdquo; mais cette erreur ne se reproduira pas.</p>

<p>D&rsquo;autant plus que les tests d&rsquo;intégration seront complétés par les tests fonctionnels et que détecteront les erreurs de not-null/foreign key laissées derrière.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Je suis aujourd&rsquo;hui pour une gestion &ldquo;Agile&rdquo; de la base de données utilisée pour les tests. La bonne voie est pour moi d&rsquo;éviter l&rsquo;usage d&rsquo;une base embarquée car il y a trop de différences entre moteurs SQL mais de désactiver certaines contraintes sur la base de test afin de faciliter le vrai travail : l&rsquo;écriture de test qui valident les requêtes (le DML) et non les restrictions SQL (le DDL).</p>

<p>Et vous, avez-vous d&rsquo;autres recommandations pour vos tests d&rsquo;intégration ?</p>
]]></content>
        </entry>
    
</feed>
